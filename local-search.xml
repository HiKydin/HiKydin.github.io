<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>002_OpenWrt中GRE掉线问题</title>
    <link href="/2023/09/26/002-OpenWrt%E4%B8%ADGRE%E6%8E%89%E7%BA%BF%E9%97%AE%E9%A2%98/"/>
    <url>/2023/09/26/002-OpenWrt%E4%B8%ADGRE%E6%8E%89%E7%BA%BF%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>前几天使用OpenWrt测试GRE功能时发现，在4G网络和有线网之间切换会导致掉线，遂简单排查了一下问题所在。</p><h3 id="情景复现"><a href="#情景复现" class="headerlink" title="情景复现"></a>情景复现</h3><p><strong>本机</strong></p><p>系统：OpenWrt</p><p>有线网卡（wan）：eth1，IP：192.168.0.194，子网掩码：255.255.255.0，网关：192.168.0.1</p><p>有线网卡（lan）：br-lan，IP：192.168.3.1，子网掩码：255.255.255.0</p><p>无线网卡（wwan）：usb0，IP：10.221.139.224，子网掩码：255.255.255.0，网关：10.221.139.1</p><p>无线网卡使用中国移动4G卡上网</p><p><strong>GRE对端</strong></p><p>系统：OpenWrt</p><p>有线网卡（wan）：eth1，IP：192.168.0.242，子网掩码：255.255.255.0，网关：192.168.0.1</p><p>有线网卡（lan）：br-lan，IP：192.168.2.218，子网掩码：255.255.255.0</p><img src="/2023/09/26/002-OpenWrt%E4%B8%ADGRE%E6%8E%89%E7%BA%BF%E9%97%AE%E9%A2%98/network_topology_diagram.png" class="" title="网络拓扑图"><p>本机GRE配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /etc/config/network<br><br>config interface &#x27;gresbksg&#x27;<br>        option disabled &#x27;0&#x27;<br>        option peeraddr &#x27;192.168.0.242&#x27; // 对端IP<br>        option proto &#x27;gre&#x27;<br>        option mtu &#x27;1280&#x27;<br>        option peerlocalip &#x27;192.168.2.0&#x27; // 对端<br>        option peerlocalmask &#x27;255.255.255.0&#x27;<br>        option zone &#x27;wan&#x27;<br><br>config interface &#x27;gresbksg_grestatic&#x27;<br>        option ifname &#x27;@gresbksg&#x27;<br>        option disabled &#x27;0&#x27;<br>        option ipaddr &#x27;192.168.5.1&#x27; // GRE隧道IP，对端为192.168.5.2<br>        option netmask &#x27;255.255.255.0&#x27;<br>        option proto &#x27;static&#x27;<br>        option zone &#x27;wan&#x27;<br></code></pre></td></tr></table></figure><p>GRE正常建立，流量走eth1，此时的路由表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@pg-2049671F7524:~# route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         192.168.0.1     0.0.0.0         UG    10     0        0 eth1<br>0.0.0.0         10.221.139.1    0.0.0.0         UG    12     0        0 usb0<br>10.221.139.0    0.0.0.0         255.255.255.0   U     12     0        0 usb0<br>192.168.0.0     0.0.0.0         255.255.255.0   U     10     0        0 eth1<br>192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br>192.168.3.0     0.0.0.0         255.255.255.0   U     0      0        0 br-lan<br>192.168.5.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br></code></pre></td></tr></table></figure><p>此时本机可以直接ping通对端的lan口，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@pg-2049671F7524:~# ping 192.168.2.218<br>PING 192.168.2.218 (192.168.2.218): 56 data bytes<br>64 bytes from 192.168.2.218: seq=0 ttl=64 time=1.481 ms<br>64 bytes from 192.168.2.218: seq=1 ttl=64 time=4.312 ms<br>64 bytes from 192.168.2.218: seq=2 ttl=64 time=2.344 ms<br>64 bytes from 192.168.2.218: seq=3 ttl=64 time=1.579 ms<br>64 bytes from 192.168.2.218: seq=4 ttl=64 time=3.409 ms<br>--- 192.168.2.218 ping statistics ---<br>5 packets transmitted, 5 packets received, 0% packet loss<br>round-trip min/avg/max = 1.481/2.625/4.312 ms<br></code></pre></td></tr></table></figure><p>路由追踪：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@pg-2049671F7524:~# traceroute 192.168.2.218<br>traceroute to 192.168.2.218 (192.168.2.218), 30 hops max, 38 byte packets<br> 1  192.168.2.218 (192.168.2.218)  1.173 ms  2.722 ms  2.603 ms<br><br></code></pre></td></tr></table></figure><p>拔掉wan口网线后，此时正常情况下应该无法ping通，因为GRE在内网中，路由表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@pg-2049671F7524:~# route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         10.77.102.1     0.0.0.0         UG    12     0        0 usb0<br>10.77.102.0     0.0.0.0         255.255.255.0   U     12     0        0 usb0<br>192.168.0.242   10.77.102.1     255.255.255.255 UGH   12     0        0 usb0<br>192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br>192.168.3.0     0.0.0.0         255.255.255.0   U     0      0        0 br-lan<br>192.168.5.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br></code></pre></td></tr></table></figure><p>将网线接回去后，还是无法ping通，此时的路由表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@pg-2049671F7524:~# route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         192.168.0.1     0.0.0.0         UG    10     0        0 eth1<br>0.0.0.0         10.77.102.1     0.0.0.0         UG    12     0        0 usb0<br>10.77.102.0     0.0.0.0         255.255.255.0   U     12     0        0 usb0<br>192.168.0.0     0.0.0.0         255.255.255.0   U     10     0        0 eth1<br>192.168.0.242   10.77.102.1     255.255.255.255 UGH   12     0        0 usb0<br>192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br>192.168.3.0     0.0.0.0         255.255.255.0   U     0      0        0 br-lan<br>192.168.5.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br></code></pre></td></tr></table></figure><p>可以发现，我们在拔掉网线后，路由表内自动添加了一条host路由</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">192.168.0.242   10.77.102.1     255.255.255.255 UGH   12     0        0 usb0<br></code></pre></td></tr></table></figure><p>但是由于我们的GRE对端是建立在内网中的，4G网络肯定是无法访问的，所有这条host路由是错误的。</p><p>当我们将网线接回后，由于已经存在了一条host路由，所有访问192.168.0.242的流量会从usb0出去，导致GRE隧道无法建立。</p><h3 id="怎么使系统正确添加host路由？"><a href="#怎么使系统正确添加host路由？" class="headerlink" title="怎么使系统正确添加host路由？"></a>怎么使系统正确添加host路由？</h3><h4 id="思路一：关闭自动添加host路由"><a href="#思路一：关闭自动添加host路由" class="headerlink" title="思路一：关闭自动添加host路由"></a>思路一：关闭自动添加host路由</h4><p>查看OpenWrt源码中的gre脚本（openwrt&#x2F;package&#x2F;network&#x2F;config&#x2F;gre&#x2F;files&#x2F;gre.sh）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-function"><span class="hljs-title">gre_setup</span></span>() &#123;<br><span class="hljs-built_in">local</span> cfg=<span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span><br><span class="hljs-built_in">local</span> mode=<span class="hljs-string">&quot;<span class="hljs-variable">$2</span>&quot;</span><br><span class="hljs-built_in">local</span> remoteip<br><br><span class="hljs-built_in">local</span> ipaddr peeraddr peerlocalip peerlocalmask<br>json_get_vars <span class="hljs-built_in">df</span> ipaddr peeraddr tunlink nohostroute peerlocalip peerlocalmask<br><br>[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$peeraddr</span>&quot;</span> ] &amp;&amp; &#123;<br>proto_notify_error <span class="hljs-string">&quot;<span class="hljs-variable">$cfg</span>&quot;</span> <span class="hljs-string">&quot;MISSING_PEER_ADDRESS&quot;</span><br>proto_block_restart <span class="hljs-string">&quot;<span class="hljs-variable">$cfg</span>&quot;</span><br><span class="hljs-built_in">exit</span><br>&#125;<br><br>remoteip=$(resolveip -t 10 -4 <span class="hljs-string">&quot;<span class="hljs-variable">$peeraddr</span>&quot;</span>)<br><br><span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$remoteip</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>proto_notify_error <span class="hljs-string">&quot;<span class="hljs-variable">$cfg</span>&quot;</span> <span class="hljs-string">&quot;PEER_RESOLVE_FAIL&quot;</span><br><span class="hljs-built_in">exit</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">for</span> ip <span class="hljs-keyword">in</span> <span class="hljs-variable">$remoteip</span>; <span class="hljs-keyword">do</span><br>peeraddr=<span class="hljs-variable">$ip</span><br><span class="hljs-built_in">break</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;nohostroute&#125;</span>&quot;</span> != <span class="hljs-string">&quot;1&quot;</span> ]; <span class="hljs-keyword">then</span><br>( proto_add_host_dependency <span class="hljs-string">&quot;<span class="hljs-variable">$cfg</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$peeraddr</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$tunlink</span>&quot;</span> )<br><span class="hljs-keyword">fi</span><br><br>[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$ipaddr</span>&quot;</span> ] &amp;&amp; &#123;<br><span class="hljs-built_in">local</span> wanif=<span class="hljs-string">&quot;<span class="hljs-variable">$tunlink</span>&quot;</span><br><span class="hljs-keyword">if</span> [ -z <span class="hljs-variable">$wanif</span> ] &amp;&amp; ! network_find_wan wanif; <span class="hljs-keyword">then</span><br>proto_notify_error <span class="hljs-string">&quot;<span class="hljs-variable">$cfg</span>&quot;</span> <span class="hljs-string">&quot;NO_WAN_LINK&quot;</span><br><span class="hljs-built_in">exit</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> ! network_get_ipaddr ipaddr <span class="hljs-string">&quot;<span class="hljs-variable">$wanif</span>&quot;</span>; <span class="hljs-keyword">then</span><br>proto_notify_error <span class="hljs-string">&quot;<span class="hljs-variable">$cfg</span>&quot;</span> <span class="hljs-string">&quot;NO_WAN_LINK&quot;</span><br><span class="hljs-built_in">exit</span><br><span class="hljs-keyword">fi</span><br>&#125;<br><br>[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$df</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">df</span>=<span class="hljs-string">&quot;1&quot;</span><br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$mode</span>&quot;</span> <span class="hljs-keyword">in</span><br>gretapip)<br>gre_generic_setup <span class="hljs-variable">$cfg</span> <span class="hljs-variable">$mode</span> <span class="hljs-variable">$ipaddr</span> <span class="hljs-variable">$peeraddr</span> <span class="hljs-string">&quot;gre4t-<span class="hljs-variable">$cfg</span>&quot;</span><br>route add -net <span class="hljs-string">&quot;<span class="hljs-variable">$peerlocalip</span>&quot;</span> netmask <span class="hljs-string">&quot;<span class="hljs-variable">$peerlocalmask</span>&quot;</span> dev <span class="hljs-string">&quot;gre4t-<span class="hljs-variable">$cfg</span>&quot;</span><br>;;<br>*)<br>gre_generic_setup <span class="hljs-variable">$cfg</span> <span class="hljs-variable">$mode</span> <span class="hljs-variable">$ipaddr</span> <span class="hljs-variable">$peeraddr</span> <span class="hljs-string">&quot;gre4-<span class="hljs-variable">$cfg</span>&quot;</span><br>route add -net <span class="hljs-string">&quot;<span class="hljs-variable">$peerlocalip</span>&quot;</span> netmask <span class="hljs-string">&quot;<span class="hljs-variable">$peerlocalmask</span>&quot;</span> dev <span class="hljs-string">&quot;gre4-<span class="hljs-variable">$cfg</span>&quot;</span><br>;;<br><span class="hljs-keyword">esac</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，只有在nohostroute为非1时，才会添加host路由</p><blockquote><p>以下是ChatGPT的回答：</p></blockquote><p><code>proto_add_host_dependency</code>是OpenWrt中的一个函数，它用于向当前接口的依赖列表中添加一个host依赖项。</p><p>在OpenWrt中，每个接口都有一个依赖列表，用于记录这个接口所依赖的其他接口或主机。当这个接口启动时，系统会检查它的依赖列表，如果依赖项中有任何一个接口或主机不可达，这个接口就无法启动。这种机制可以保证网络的连通性和稳定性。</p><p><code>proto_add_host_dependency</code>函数用于向当前接口的依赖列表中添加一个host依赖项。它接受三个参数：当前接口的配置名称、依赖主机的IP地址、依赖主机所在的网络接口名称。例如，以下命令将当前接口<code>eth0</code>添加一个host依赖项，依赖主机的IP地址是<code>192.168.1.1</code>，所在的网络接口名称是<code>eth1</code>：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proto_add_host_dependency</span> <span class="hljs-string">&quot;eth0&quot;</span> <span class="hljs-string">&quot;192.168.1.1&quot;</span> <span class="hljs-string">&quot;eth1&quot;</span><br></code></pre></td></tr></table></figure><p>在GRE隧道的配置中，<code>proto_add_host_dependency</code>函数通常用于将对端IP地址添加到当前隧道的依赖列表中。这样，当对端不可达时，当前隧道就无法启动，从而避免了无效的隧道连接。</p><p>在你的问题中，<code>proto_add_host_dependency</code>函数用于向当前GRE隧道的依赖列表中添加对端IP地址的host依赖项。如果<code>nohostroute</code>字段没有设置为<code>1</code>，系统会自动添加这个host路由，使得对端IP地址可达。如果<code>nohostroute</code>字段设置为<code>1</code>，则需要手动使用<code>proto_add_host_dependency</code>函数将对端IP地址添加到依赖列表中，否则GRE隧道无法启动。</p><p>OpenWrt官方是这样<a href="https://openwrt.org/docs/guide-user/network/tunneling_interface_protocols">解释</a>这个参数的：</p><table><thead><tr><th>Name</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>nohostroute</td><td>boolean</td><td>no</td><td>0</td><td>Do not add routes to ensure the tunnel endpoints are routed via non-tunnel device</td></tr></tbody></table><p>于是我尝试了更改GRE的配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">config interface &#x27;gresbksg&#x27;<br>        option disabled &#x27;0&#x27;<br>        option peeraddr &#x27;192.168.0.242&#x27;<br>        option proto &#x27;gre&#x27;<br>        option mtu &#x27;1280&#x27;<br>        option peerlocalip &#x27;192.168.2.0&#x27;<br>        option peerlocalmask &#x27;255.255.255.0&#x27;<br>        option zone &#x27;wan&#x27;<br>        option nohostroute &#x27;1&#x27;<br><br>config interface &#x27;gresbksg_grestatic&#x27;<br>        option ifname &#x27;@gresbksg&#x27;<br>        option disabled &#x27;0&#x27;<br>        option ipaddr &#x27;192.168.5.1&#x27;<br>        option netmask &#x27;255.255.255.0&#x27;<br>        option proto &#x27;static&#x27;<br>        option zone &#x27;wan&#x27;<br></code></pre></td></tr></table></figure><p>修改完成后重启network，发现是可以正常使用的。此时的路由表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@pg-2049671F7524:~# route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         192.168.0.1     0.0.0.0         UG    10     0        0 eth1<br>0.0.0.0         10.162.134.1    0.0.0.0         UG    12     0        0 usb0<br>10.162.134.0    0.0.0.0         255.255.255.0   U     12     0        0 usb0<br>192.168.0.0     0.0.0.0         255.255.255.0   U     10     0        0 eth1<br>192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br>192.168.3.0     0.0.0.0         255.255.255.0   U     0      0        0 br-lan<br>192.168.5.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br></code></pre></td></tr></table></figure><p>将网线拔掉后，路由表已经不会自动添加host路由了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@pg-2049671F7524:~# route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         10.162.134.1    0.0.0.0         UG    12     0        0 usb0<br>10.162.134.0    0.0.0.0         255.255.255.0   U     12     0        0 usb0<br>192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br>192.168.3.0     0.0.0.0         255.255.255.0   U     0      0        0 br-lan<br>192.168.5.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br></code></pre></td></tr></table></figure><p>然后再接回网线，查看路由表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@pg-2049671F7524:~# route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         192.168.0.1     0.0.0.0         UG    10     0        0 eth1<br>0.0.0.0         10.162.134.1    0.0.0.0         UG    12     0        0 usb0<br>10.162.134.0    0.0.0.0         255.255.255.0   U     12     0        0 usb0<br>192.168.0.0     0.0.0.0         255.255.255.0   U     10     0        0 eth1<br>192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br>192.168.3.0     0.0.0.0         255.255.255.0   U     0      0        0 br-lan<br>192.168.5.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br></code></pre></td></tr></table></figure><p>可以发现因为没有错误的host路由，我们的GRE隧道又能正常建立连接了。尝试ping一下对端的LAN口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@pg-2049671F7524:~# ping 192.168.2.218<br>PING 192.168.2.218 (192.168.2.218): 56 data bytes<br>64 bytes from 192.168.2.218: seq=0 ttl=64 time=1.810 ms<br>64 bytes from 192.168.2.218: seq=1 ttl=64 time=3.701 ms<br>64 bytes from 192.168.2.218: seq=2 ttl=64 time=6.526 ms<br>64 bytes from 192.168.2.218: seq=3 ttl=64 time=4.254 ms<br>--- 192.168.2.218 ping statistics ---<br>4 packets transmitted, 4 packets received, 0% packet loss<br>round-trip min/avg/max = 1.810/4.072/6.526 ms<br></code></pre></td></tr></table></figure><p><strong>疑惑：为什么用有线时，不会添加host路由？</strong></p><h4 id="思路二：将GRE隧道绑定到某个接口上-未成功"><a href="#思路二：将GRE隧道绑定到某个接口上-未成功" class="headerlink" title="思路二：将GRE隧道绑定到某个接口上(未成功)"></a>思路二：将GRE隧道绑定到某个接口上(未成功)</h4><p><del>可以使用参数<code>tunlink</code></del></p><table><thead><tr><th>Name</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>tunlink</td><td>string</td><td>no</td><td>(none)</td><td>Bind the tunnel to the specified interface, OpenWrt 21.02+</td></tr></tbody></table><p><del>修改network中gre的配置，将GRE隧道绑定到本地网络接口eth1上：</del></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>001_C语言中将char=1会发生什么？</title>
    <link href="/2023/09/10/001-C%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%B0%86char-1%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <url>/2023/09/10/001-C%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%B0%86char-1%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/09/09/hello-world/"/>
    <url>/2023/09/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
