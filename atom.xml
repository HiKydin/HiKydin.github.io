<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kydin&#39;s Blog</title>
  
  
  <link href="https://kydins.com/atom.xml" rel="self"/>
  
  <link href="https://kydins.com/"/>
  <updated>2024-04-27T07:56:28.686Z</updated>
  <id>https://kydins.com/</id>
  
  <author>
    <name>Kydin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>010-从离职到入职</title>
    <link href="https://kydins.com/posts/b88e9f35.html"/>
    <id>https://kydins.com/posts/b88e9f35.html</id>
    <published>2024-04-27T07:51:57.000Z</published>
    <updated>2024-04-27T07:56:28.686Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从离职到入职"><a href="#从离职到入职" class="headerlink" title="从离职到入职"></a>从离职到入职</h1><p>最近经历了大大小小的一些事情，这里记录一下，作为一个从来没跳过槽的职场新人，你在跳槽前后的一些注意事项。</p><h2 id="跳槽前的准备"><a href="#跳槽前的准备" class="headerlink" title="跳槽前的准备"></a>跳槽前的准备</h2><h3 id="职业规划"><a href="#职业规划" class="headerlink" title="职业规划"></a>职业规划</h3><p>略</p><h3 id="个人情况评估"><a href="#个人情况评估" class="headerlink" title="个人情况评估"></a>个人情况评估</h3><p>在你准备跳槽前，你要清楚的是，自己是要骑驴找马，还是裸辞？是打算在哪个城市工作？需要提前搬家吗？如果有竞业协议怎么办？</p><h3 id="简历"><a href="#简历" class="headerlink" title="简历"></a>简历</h3><p>写一份适合你要投递岗位的简历非常重要，你应该避免一份简历多次投递</p><p>最好的做法是根据不同的 JD (Job Description) 修改你的简历</p><p>我推荐你使用<a href="https://easycv.cn/">简单简历</a>，我很喜欢他们的产品设计，简洁美观。或者<a href="https://www.wondercv.com/">超级简历</a> 。</p><p>你最好将每一份简历规范命名</p><p>基本公式：姓名 + 应聘岗位 + 电话，如果是发邮件的形式，请不要只发送一个附件，在正文中可以做简单的自我介绍。</p><p>你可以阅读《<a href="https://www.v2ex.com/t/1031220">对于最近招聘市场行情的一些个人理解</a>》</p><h2 id="在离职与入职之间"><a href="#在离职与入职之间" class="headerlink" title="在离职与入职之间"></a>在离职与入职之间</h2><h3 id="提交辞呈-如何体面地离开"><a href="#提交辞呈-如何体面地离开" class="headerlink" title="提交辞呈&#x2F;如何体面地离开"></a>提交辞呈&#x2F;如何体面地离开</h3><p><a href="https://glints.com/tw/blog/resignation-letter-sample/">一封體面的離職信，讓你和公司好好說再見</a></p><p>首先需要明确的是，辞职不需要申请<a href="https://www.gov.cn/jrzg/2007-06/29/content_667720.htm">《中华人民共和国劳动合同法》（全文）</a></p><blockquote><p>劳动者提前三十日以书面形式通知用人单位，可以解除劳动合同。劳动者在试用期内提前三日通知用人单位，可以解除劳动合同。</p></blockquote><p>所以你的辞呈中不需要出现：请批准、申请等字眼，最好也尽可能少地透露个人情况。</p><p>然后跟你的 leader 或者 hr 核对好离职细节，包括社保减员时间、公司资产归还等。</p><h3 id="offer-的选择"><a href="#offer-的选择" class="headerlink" title="offer 的选择"></a>offer 的选择</h3><p>略</p><h3 id="体检预约"><a href="#体检预约" class="headerlink" title="体检预约"></a>体检预约</h3><p>现在绝大部分公立三甲的体检项目都是要预约的，并且一般是周一到周五，周末就算可以体检，一般也得工作日才能拿报告。</p><p>需要注意的是，有的医院有区分专门的入职体检&#x2F;教师资格证体检&#x2F;公务员体检&#x2F;成人体检，不要选错了。</p><p>一般来说你应该尽可能约在九点前，正常来说，医院 9 点半前的抽血结果在当天就能出报告。</p><p>总归，早点总是没错的。</p><p>你可以直接用支付宝搜索 “网上挂号” ，点击 “按科室挂号”，直接找出所有可以预约的医院。</p><h3 id="体检前一天晚上"><a href="#体检前一天晚上" class="headerlink" title="体检前一天晚上"></a>体检前一天晚上</h3><p>考虑到第二天需要抽血，你应该避免在晚上深夜进食，并且在第二天早上保持空腹。</p><p><a href="https://dxy.com/article/6275">丁香医生 - 关于抽血检查的那些疑惑</a></p><p>同时你需要准备一张一寸或者两寸的证件照，需要贴在体检报告上。</p><p>记得早点睡觉。</p><h3 id="体检"><a href="#体检" class="headerlink" title="体检"></a>体检</h3><p>抵达医院后先去缴费，主动递上自己的社保卡或住院卡，告知预约了入职体检，工作人员会告诉你需要交多少钱。</p><p>然后就可以去体检科等待叫号，之后会领取到你的体检表，只需要按照上面的项目做就可以。</p><p>一般是先去抽血，做完之后下午会出结果，去自助机上领取。</p><p>有的自助机是通过上午做项目给的小票扫码打印的，注意保存。</p><p>之后拿着材料到体检科找医生写总结报告，盖章。就可以去缴费处<strong>开发票</strong>退余额回家了。</p><h2 id="入职"><a href="#入职" class="headerlink" title="入职"></a>入职</h2><p>入职当天请注意着装，将所有必要的手续用文件袋装好，在出门前清点是否有遗漏的。</p><p>第一天到公司建议比正常上班时间半小时到公司。<br>一是你可以趁这段时间，熟悉一下公司的布局，或者给自己挑一个好工位。<br>二是在同事没有完全到的时候你可以进行一些单点社交，这样的压力会比所有人都到工位上时小很多。</p><p>一般情况下，你入职当天都是需要第二天补卡的，不要忘记。</p><h3 id="社保"><a href="#社保" class="headerlink" title="社保"></a>社保</h3><p>如果是更换省份工作，可能会需要在当地办一张社保卡，具体情况要根据你所在城市的政策，你可以通过小红书、公众号等查询到。</p><p><a href="https://ybj.hubei.gov.cn/bmdt/ztzl/2021/ybzckpzl/hbs/yyjghzbcg_hbs/202209/t20220929_4327379.shtml">湖北省医疗保障局 - 变更参保地后，是否需要重新办理社保卡？</a></p><p><a href="https://www.zj.gov.cn/art/2021/10/25/art_1229037423_180670.html">浙江省人民政府 - 社保卡需要重新办理吗？</a></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>换工作是一件很累的事情，如果你能找到自己满意的事情，那真是一件最值得欢呼的事情。</p><p>如果你暂时还没找到满意的工作，也不要灰心，是金子总会发光。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;从离职到入职&quot;&gt;&lt;a href=&quot;#从离职到入职&quot; class=&quot;headerlink&quot; title=&quot;从离职到入职&quot;&gt;&lt;/a&gt;从离职到入职&lt;/h1&gt;&lt;p&gt;最近经历了大大小小的一些事情，这里记录一下，作为一个从来没跳过槽的职场新人，你在跳槽前后的一些注意事项。&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>009-双人成行——送给所有大人的精彩旅程</title>
    <link href="https://kydins.com/posts/23bc797a.html"/>
    <id>https://kydins.com/posts/23bc797a.html</id>
    <published>2024-03-24T03:29:04.000Z</published>
    <updated>2024-03-24T04:24:26.836Z</updated>
    
    <content type="html"><![CDATA[<h1 id="迟来的双人成行游后感"><a href="#迟来的双人成行游后感" class="headerlink" title="迟来的双人成行游后感"></a>迟来的双人成行游后感</h1><p>相信很多人都听说过「双人成行」这款游戏的大名吧！2021 的 TGA 年度游戏，传说中配置要求最高的游戏之一：因为你需要一个朋友。<br>最近我趁着周末时间，花了三周时间把它通关了，这是我目前玩过最好玩的双人游戏！出色的情节设计、恰到好处的音效、有挑战却不至于太难的操作、脑洞大开的解谜，都是我想为它写一篇点评的因素，但它也不需要我的点评，它已经证明自己是最好玩的双人同屏游戏了。</p><h2 id="出色的情节设计"><a href="#出色的情节设计" class="headerlink" title="出色的情节设计"></a>出色的情节设计</h2><p>大概的情节就是一对夫妻因为长时间的争吵想要离婚，他们的女儿向「Book of love」这本书许愿希望挽回父母的感情。随后这对夫妻变成了两个粘土小人，玩家需要操控着他们完成哈金博士的要求，一步步在合作中找回激情与爱。<br>从一开始的吸尘器房间开始，就能感觉到这个游戏对于合作的要求，玩家必须在合适的时机完成配合，才能打败 boss。并且在后续的每一个场景中，场景元素各不相同，用近乎奢侈的方式搭建的画面，很可能就在玩家视角中存在几分钟。同时每个场景获得的全新能力也是脑洞大开，不会出现玩法重复导致的“赶紧通关吧”的想法。<br>个人最喜欢的是玩具城堡中的 rpg 环节，流畅的第三人称视角转为上帝视角的运镜一点也不突兀，在这其中添加的“刷刷刷”的快感更是恰到好处。</p><p><img src="https://image.kydins.com/009-p1.png" alt="玩具城堡中的 rpg 环节"></p><p>搭档最喜欢的是冰雪世界环节，冰雪世界可探索的地方非常多，几乎所有场景都可以互动，也是给了非常大的地图供玩家爽滑。</p><iframe width="100%" height="100%" src="https://www.youtube.com/embed/XV81E2xqT2w" title="「双人成行」冰雪世界" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><iframe width="100%" height="100%" src="https://www.youtube.com/embed/GpqZ2JwkDDk" title="「双人成行」滑冰" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><h2 id="恰到好处的音效"><a href="#恰到好处的音效" class="headerlink" title="恰到好处的音效"></a>恰到好处的音效</h2><p>在「双人成行」中，对音乐的使用隐藏在各种地方，比如：场景中出现一家钢琴，从过去就会发出“哆来咪发唆啦西哆”的真实声音、从吉他弦上滑过会发出和弦声。<br>而在鼹鼠窝中，一切声音都会消失，只剩下安静而可怕的呼吸声，还有玩家的脚步声。这时候你也会情不自禁地屏住呼吸，然后在随后的跑酷中又通过紧张的管弦乐绷紧你的神经，这时候脑子里想的是，run！！！</p><iframe width="100%" height="100%" src="https://www.youtube.com/embed/kZwbbZSR0Bg" title="「双人成行」逃离鼹鼠窝" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><p>还有在 club 中，从一步步调动起全场的气氛，真的是身体也会情不自禁地摆动起来。</p><h2 id="有挑战却不至于太难的操作"><a href="#有挑战却不至于太难的操作" class="headerlink" title="有挑战却不至于太难的操作"></a>有挑战却不至于太难的操作</h2><p>对于一款双人协作的通关游戏，「双人成行」对于关卡的难度把握可谓是正正好，很多时候只需要你找到战斗的技巧，磨三、四个回合就能成功通关。<br>我认为最难的还是工具箱 boss，在刚开始上手就遇到这么难的 boss，还是有点难打，但是发现其中的诀窍后重来了三次就通关了。<br>对于「死亡惩罚」的理解，「双人成行」是通过“只要有一个人活着，就可以马上原地复活”，同时堆砌大量的存档点，来确保玩家不需要在一个地方重复走。<br>在逃离松鼠窝后期，乘坐松鼠们制作的内裤飞机阶段进行的格斗环节也令人大呼精彩。反正我是想象不到，怎么将一个「拳皇」做成双人游戏并且不能是 2v1 的群殴也不能是轮番上场。在操作飞机方向的同时，搭档在飞机上的打斗也会影响飞机的方向。因此更需要两个人的配合。</p><p><img src="https://image.kydins.com/009-p2.png" alt="格斗环节"><br><img src="https://image.kydins.com/009-p3.png" alt="格斗环节"></p><p>在与太空猴大战中，对于导弹的操控也是令人直呼太好玩了，将空战元素漫不经心地完美融合进来。</p><h2 id="脑洞大开的解谜"><a href="#脑洞大开的解谜" class="headerlink" title="脑洞大开的解谜"></a>脑洞大开的解谜</h2><p>在每个情景中获得的能力，都是需要两个人互相配合才能通关的，而对不同场景的探索，更是解密的关键。<br>比如在冰雪世界中对于磁铁两极的运用，围绕这点所搭建的解谜真的是太好玩了。</p><iframe width="100%" height="100%" src="https://www.youtube.com/embed/XlojfFMiYNU" title="「双人成行」冰雪世界 - 磁铁" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><p>还有在小梅的钟表中，场景的时间一次次停止、倒转，每一次看似相同的时间，实际上通关的方式就在其中。在玩的过程中我很少遇到卡关的现象，它的场景引导做的足够好，并且不是炫技般地将大量场景简单粗暴地堆叠到你的面前。而是通过丰富、快速地切换来实现引导。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>在游玩过程中，早期角色还经常拌嘴，但是到了后期就变成两个人的相互鼓励和默契，这其中的过程只有你自己坐下来游玩才能感受。<br>我在豆瓣看到有人吐槽它的结局也是不能落俗套，说是「最好的离婚冷静期」，但是如果你以小孩子的视角看，最后的信中提到：你们不要为了我而争吵，我会离开，我的零花钱够买一张公交车票，我带了棒棒糖。<br>或许，你也会觉得，它就是应该这样结局，因为它是所有小孩子心中的最好结局——哪怕大人不这样认为。</p><p><img src="https://image.kydins.com/009-p4.png" alt="大象公主"><br><img src="https://image.kydins.com/009-p5.png" alt="大象公主"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;迟来的双人成行游后感&quot;&gt;&lt;a href=&quot;#迟来的双人成行游后感&quot; class=&quot;headerlink&quot; title=&quot;迟来的双人成行游后感&quot;&gt;&lt;/a&gt;迟来的双人成行游后感&lt;/h1&gt;&lt;p&gt;相信很多人都听说过「双人成行」这款游戏的大名吧！2021 的 TGA 年度游</summary>
      
    
    
    
    
    <category term="游戏" scheme="https://kydins.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>008-C 语言中使用 libcurl 实现多线程下载</title>
    <link href="https://kydins.com/posts/808b1d88.html"/>
    <id>https://kydins.com/posts/808b1d88.html</id>
    <published>2024-01-19T21:11:24.000Z</published>
    <updated>2024-03-24T04:21:07.047Z</updated>
    
    <content type="html"><![CDATA[<p>事情是这样的，笔者在实现一个下载功能的时候遇到一个问题：服务器对下载速率进行了限制，对于业务上的文件下载，是不确定大小的，只能从服务器请求下载的时候才能知道需要下载的文件大小。如果使用单线程下载的话，用户体验非常差，因此需要实现多线程下载的功能。</p><h1 id="获取文件大小"><a href="#获取文件大小" class="headerlink" title="获取文件大小"></a>获取文件大小</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;curl/curl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">size_t</span> <span class="hljs-title function_">get_file_size</span><span class="hljs-params">(<span class="hljs-type">char</span> *url)</span> &#123;<br>  <span class="hljs-type">size_t</span> filesize = <span class="hljs-number">0</span>;<br>  CURL *curl_handle;<br>  curl_global_init(CURL_GLOBAL_ALL);<br>  curl_handle = curl_easy_init();<br>  <span class="hljs-keyword">if</span> (curl_handle) &#123;<br>    curl_easy_setopt(curl_handle, CURLOPT_URL, url);<br>    curl_easy_setopt(curl_handle, CURLOPT_HEADER,<br>                     <span class="hljs-number">1</span>);  <span class="hljs-comment">// 设置 HEADER 会得到 header，文件大小信息就在 header 中</span><br>    curl_easy_setopt(curl_handle, CURLOPT_NOBODY,<br>                     <span class="hljs-number">1</span>);  <span class="hljs-comment">// 设置 NOBODY 可以避免下载</span><br>    CURLcode res_code = curl_easy_perform(curl_handle);  <span class="hljs-comment">// 请求</span><br>    curl_easy_getinfo(curl_handle, CURLINFO_CONTENT_LENGTH_DOWNLOAD_T,<br>                      &amp;filesize);  <span class="hljs-comment">// 从请求头中获取待下载文件的大小</span><br>  &#125;<br>  curl_global_cleanup();<br>  <br>  <span class="hljs-keyword">return</span> filesize;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">size_t</span> file_size = <span class="hljs-number">0</span>, per_thread_size = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">char</span> url[] = <span class="hljs-string">&quot;https://test.com/test.exe&quot;</span>;<br><br>  file_size = get_file_size(url);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;file_size=%d\n&quot;</span>,file_size);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 gcc 编译的时候需要链接上 curl 库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc curl.c -o curltest -lcurl<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c">pureos@pureos:~/Documents$ ./curltest <br>HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK<br>Server: nginx/<span class="hljs-number">1.21</span><span class="hljs-number">.5</span><br>Date: Mon, <span class="hljs-number">08</span> Jan <span class="hljs-number">2024</span> <span class="hljs-number">06</span>:<span class="hljs-number">21</span>:<span class="hljs-number">35</span> GMT<br>Content-Type: application/octet-stream<br>Content-Length: <span class="hljs-number">74194069</span><br>Connection: keep-alive<br>Accept-Ranges: bytes<br>Content-Security-Policy: block-all-mixed-content<br>ETag: <span class="hljs-string">&quot;2bf56162523c85f740adebd078eb3a78&quot;</span><br>Last-Modified: Tue, <span class="hljs-number">02</span> Jan <span class="hljs-number">2024</span> <span class="hljs-number">03</span>:<span class="hljs-number">02</span>:<span class="hljs-number">13</span> GMT<br>Strict-Transport-Security: max-age=<span class="hljs-number">31536000</span>; includeSubDomains<br>Vary: Origin<br>Vary: Accept-Encoding<br>X-Amz-Request-Id: <span class="hljs-number">17</span>A84AF9CDE1356D<br>X-Content-Type-Options: nosniff<br>X-Xss-Protection: <span class="hljs-number">1</span>; mode=block<br><br>file_size=<span class="hljs-number">74194069</span><br></code></pre></td></tr></table></figure><p>检查了一下，获取到的文件大小是正确的，那么就可以直接开始多线程下载了。</p><h1 id="多线程下载"><a href="#多线程下载" class="headerlink" title="多线程下载"></a>多线程下载</h1><p>这里我使用的是创建多个线程，每个线程下载一部分文件，全部下载完成后再合并为一个文件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">create_thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *(*routine)(<span class="hljs-type">void</span> *), <span class="hljs-type">void</span> *arg,</span><br><span class="hljs-params">                          <span class="hljs-type">const</span> <span class="hljs-type">pthread_attr_t</span> *attr)</span> &#123;<br>  <span class="hljs-type">pthread_t</span> tid;<br>  <span class="hljs-keyword">if</span> (!pthread_create(&amp;tid, attr, routine, arg)) &#123;<br>    pthread_detach(tid);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;create thread fail!\n&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>  usleep(<span class="hljs-number">300000</span>);<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;curl/curl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> THREAD_COUNT 16</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ThreadData</span> &#123;</span><br>  <span class="hljs-type">char</span> *url;<br>  <span class="hljs-type">char</span> *outputFilename;<br>  <span class="hljs-type">long</span> startRange;<br>  <span class="hljs-type">long</span> endRange;<br>  <span class="hljs-type">char</span> finish;<br>&#125; ThreadData;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @description: 获取时间戳函数</span><br><span class="hljs-comment"> * @return &#123;*&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title function_">get_timestamp</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>  <span class="hljs-type">long</span> <span class="hljs-type">long</span> tmp;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> <span class="hljs-title">tv</span>;</span><br><br>  gettimeofday(&amp;tv, <span class="hljs-literal">NULL</span>);<br>  tmp = tv.tv_sec;<br>  tmp = tmp * <span class="hljs-number">1000</span>;<br>  tmp = tmp + (tv.tv_usec / <span class="hljs-number">1000</span>);<br><br>  <span class="hljs-keyword">return</span> tmp;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @description: 创建线程</span><br><span class="hljs-comment"> * @param &#123;void&#125; *</span><br><span class="hljs-comment"> * @return &#123;*&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">create_thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *(*routine)(<span class="hljs-type">void</span> *), <span class="hljs-type">void</span> *arg,</span><br><span class="hljs-params">                          <span class="hljs-type">const</span> <span class="hljs-type">pthread_attr_t</span> *attr)</span> &#123;<br>  <span class="hljs-type">pthread_t</span> tid;<br>  <span class="hljs-keyword">if</span> (!pthread_create(&amp;tid, attr, routine, arg)) &#123;<br>    pthread_detach(tid);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;create thread fail!\n&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>  usleep(<span class="hljs-number">300000</span>);<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">size_t</span> <span class="hljs-title function_">write_data</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> size, <span class="hljs-type">size_t</span> nmemb, <span class="hljs-type">void</span> *stream)</span> &#123;<br>  <span class="hljs-type">size_t</span> written = fwrite(ptr, size, nmemb, (FILE *)stream);<br>  <span class="hljs-keyword">return</span> written;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @description: 下载文件的线程</span><br><span class="hljs-comment"> * @param &#123;void&#125; *ptr</span><br><span class="hljs-comment"> * @return &#123;*&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> *<span class="hljs-title function_">download_part</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr)</span> &#123;<br>  ThreadData *data = (ThreadData *)ptr;<br>  <span class="hljs-type">char</span> range[<span class="hljs-number">64</span>];<br>  CURL *curl_handle;<br>  FILE *pagefile;<br>  CURLcode res = <span class="hljs-number">-1</span>;<br><br>  <span class="hljs-built_in">snprintf</span>(range, <span class="hljs-keyword">sizeof</span>(range), <span class="hljs-string">&quot;%ld-%ld&quot;</span>, data-&gt;startRange, data-&gt;endRange);<br><br>  curl_global_init(CURL_GLOBAL_ALL);<br>  curl_handle = curl_easy_init();<br>  <span class="hljs-keyword">if</span> (curl_handle) &#123;<br>    curl_easy_setopt(curl_handle, CURLOPT_URL, data-&gt;url);<br><br>    <span class="hljs-comment">// curl_easy_setopt(curl_handle, CURLOPT_VERBOSE, 1L);</span><br>    <span class="hljs-comment">/* 这个选项用于开启详细模式（verbose mode）。设置为非零值时，libcurl</span><br><span class="hljs-comment">     * 会打印额外的调试信息，这些信息包括发送和接收的数据，如 HTTP 请求和响应头。</span><br><span class="hljs-comment">     *这对于开发和调试非常有用，因为你可以看到发生在传输层的所有事情。*/</span><br><br>    <span class="hljs-comment">// curl_easy_setopt(curl_handle, CURLOPT_NOPROGRESS, 1L);</span><br>    <span class="hljs-comment">/* 但是如果你启用了 CURLOPT_NOPROGRESS 选项并设置为零值，libcurl</span><br><span class="hljs-comment">     * 将调用一个进度回调函数（progress function）来显示传输进度。*/</span><br>    curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, write_data);<br>    curl_easy_setopt(curl_handle, CURLOPT_TIMEOUT, <span class="hljs-number">600L</span>);<br>    curl_easy_setopt(curl_handle, CURLOPT_FOLLOWLOCATION, <span class="hljs-number">1L</span>);<br>    curl_easy_setopt(curl_handle, CURLOPT_RANGE, range);<br><br>    <span class="hljs-comment">/* open the file */</span><br>    pagefile = fopen(data-&gt;outputFilename, <span class="hljs-string">&quot;wb&quot;</span>);<br>    <span class="hljs-keyword">if</span> (pagefile) &#123;<br>      curl_easy_setopt(curl_handle, CURLOPT_WRITEDATA, pagefile);<br>      res = curl_easy_perform(curl_handle);<br>      fclose(pagefile);<br>    &#125;<br>    curl_easy_cleanup(curl_handle);<br>  &#125;<br>  curl_global_cleanup();<br><br>  <span class="hljs-keyword">if</span> (res == CURLE_OK) &#123;<br>    data-&gt;finish = <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @description: 合并文件</span><br><span class="hljs-comment"> * @param &#123;char&#125; *final_output</span><br><span class="hljs-comment"> * @param &#123;int&#125; num_files</span><br><span class="hljs-comment"> * @return &#123;*&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">merge_files</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *final_output, <span class="hljs-type">int</span> num_files)</span> &#123;<br>  FILE *fout, *ftmp;<br>  <span class="hljs-type">char</span> buffer[<span class="hljs-number">1024</span>];<br>  <span class="hljs-type">size_t</span> bytes;<br><br>  <span class="hljs-comment">// 打开最终输出文件</span><br>  fout = fopen(final_output, <span class="hljs-string">&quot;wb&quot;</span>);<br>  <span class="hljs-keyword">if</span> (!fout) &#123;<br>    perror(<span class="hljs-string">&quot;Error opening final output file&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// 循环遍历所有临时文件</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num_files; ++i) &#123;<br>    <span class="hljs-type">char</span> tmp_file[<span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">snprintf</span>(tmp_file, <span class="hljs-keyword">sizeof</span>(tmp_file), <span class="hljs-string">&quot;test%d.exe&quot;</span>, i);<br>    <span class="hljs-comment">// 打开临时文件</span><br>    ftmp = fopen(tmp_file, <span class="hljs-string">&quot;rb&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!ftmp) &#123;<br>      perror(<span class="hljs-string">&quot;Error opening temporary file&quot;</span>);<br>      fclose(fout);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 读取临时文件内容并写入到最终文件中</span><br>    <span class="hljs-keyword">while</span> ((bytes = fread(buffer, <span class="hljs-number">1</span>, <span class="hljs-keyword">sizeof</span>(buffer), ftmp)) &gt; <span class="hljs-number">0</span>) &#123;<br>      fwrite(buffer, <span class="hljs-number">1</span>, bytes, fout);<br>    &#125;<br><br>    <span class="hljs-comment">// 关闭临时文件</span><br>    fclose(ftmp);<br><br>    <span class="hljs-comment">// 删除临时文件</span><br>    remove(tmp_file);<br>  &#125;<br><br>  <span class="hljs-comment">// 关闭最终文件</span><br>  fclose(fout);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @description: 获取待下载文件大小</span><br><span class="hljs-comment"> * @param &#123;char&#125; *url</span><br><span class="hljs-comment"> * @return &#123;*&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">size_t</span> <span class="hljs-title function_">get_file_size</span><span class="hljs-params">(<span class="hljs-type">char</span> *url)</span> &#123;<br>  <span class="hljs-type">size_t</span> filesize = <span class="hljs-number">0</span>;<br>  CURL *curl_handle;<br>  curl_global_init(CURL_GLOBAL_ALL);<br>  curl_handle = curl_easy_init();<br>  <span class="hljs-keyword">if</span> (curl_handle) &#123;<br>    curl_easy_setopt(curl_handle, CURLOPT_URL, url);<br>    curl_easy_setopt(curl_handle, CURLOPT_HEADER,<br>                     <span class="hljs-number">1</span>);  <span class="hljs-comment">// 设置 HEADER 会得到 header，文件大小信息就在 header 中</span><br>    curl_easy_setopt(curl_handle, CURLOPT_NOBODY,<br>                     <span class="hljs-number">1</span>);  <span class="hljs-comment">// 设置 NOBODY 可以避免下载</span><br>    CURLcode res_code = curl_easy_perform(curl_handle);  <span class="hljs-comment">// 请求</span><br>    curl_easy_getinfo(curl_handle, CURLINFO_CONTENT_LENGTH_DOWNLOAD_T,<br>                      &amp;filesize);  <span class="hljs-comment">// 从请求头中获取待下载文件的大小</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;file_size=%d\n&quot;</span>, filesize);<br>  &#125;<br>  curl_global_cleanup();<br><br>  <span class="hljs-keyword">return</span> filesize;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>  ThreadData threadData[THREAD_COUNT];<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *final_output = <span class="hljs-string">&quot;test.exe&quot;</span>;<br>  <span class="hljs-type">long</span> <span class="hljs-type">long</span> curr_time, finish_time;<br>  <span class="hljs-type">size_t</span> file_size = <span class="hljs-number">0</span>, per_thread_size = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">char</span> url[] = <span class="hljs-string">&quot;https://test.com/test.exe&quot;</span>;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">3</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;get file size error!\n&quot;</span>);<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (file_size == <span class="hljs-number">0</span>) &#123;<br>      file_size = get_file_size(url);<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  per_thread_size = file_size / THREAD_COUNT;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;per_thread_size=%d\n&quot;</span>, per_thread_size);<br><br>  curr_time = get_timestamp();<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;start download!curr_time=%lld\n&quot;</span>, curr_time);<br>  <span class="hljs-comment">// 创建并启动线程</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; THREAD_COUNT; i++) &#123;<br>    <span class="hljs-type">char</span> tmp_file[<span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">snprintf</span>(tmp_file, <span class="hljs-keyword">sizeof</span>(tmp_file), <span class="hljs-string">&quot;test%d.exe&quot;</span>, i);<br><br>    threadData[i].url = url;<br>    threadData[i].outputFilename = tmp_file;  <span class="hljs-comment">// 应该是唯一的临时文件名</span><br>    threadData[i].startRange = i * per_thread_size;<br>    threadData[i].endRange = (i == (THREAD_COUNT - <span class="hljs-number">1</span>))<br>                                 ? (file_size - <span class="hljs-number">1</span>)<br>                                 : ((i + <span class="hljs-number">1</span>) * per_thread_size - <span class="hljs-number">1</span>);<br>    threadData[i].finish = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;create download thread!i=%d,file name=%s\n&quot;</span>, i, tmp_file);<br>    create_thread(download_part, &amp;threadData[i], <span class="hljs-literal">NULL</span>);<br>  &#125;<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;downloading...\n&quot;</span>);<br>  <span class="hljs-comment">// 等待所有线程完成</span><br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; THREAD_COUNT; i++) &#123;<br>      <span class="hljs-keyword">if</span> (threadData[i].finish == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">break</span>;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i &lt; THREAD_COUNT - <span class="hljs-number">1</span> &amp;&amp; threadData[i].finish) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == THREAD_COUNT - <span class="hljs-number">1</span> &amp;&amp; threadData[i].finish) &#123;<br>        <span class="hljs-comment">// 所有全部下载完成</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;download finish!&quot;</span>);<br>        <span class="hljs-keyword">goto</span> succ;<br>      &#125;<br>    &#125;<br>    sleep(<span class="hljs-number">1</span>);<br>  &#125;<br><br>succ:<br>  finish_time = get_timestamp();<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;finish_time=%lld\n&quot;</span>, finish_time);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;use time = %lld\n&quot;</span>, finish_time - curr_time);<br>  <span class="hljs-comment">// 合并文件</span><br>  <span class="hljs-keyword">if</span> (merge_files(final_output, THREAD_COUNT) != <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Failed to merge files\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译的时候链接上所需库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc curl.c -o curltest -lcurl -lpthread<br></code></pre></td></tr></table></figure><p>执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./curltest<br></code></pre></td></tr></table></figure><p>此时查看一下是否有在下载：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">pureos@pureos:~/Documents$ ls</span> <span class="hljs-literal">-</span><span class="hljs-comment">lh | grep firmware</span><br><span class="hljs-literal">-</span><span class="hljs-comment">rw</span><span class="hljs-literal">-</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span>  <span class="hljs-comment">1 pureos pureos 1</span><span class="hljs-string">.</span><span class="hljs-comment">6M  1月  8 14:55 test0</span><span class="hljs-string">.</span><span class="hljs-comment">exe</span><br><span class="hljs-literal">-</span><span class="hljs-comment">rw</span><span class="hljs-literal">-</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span>  <span class="hljs-comment">1 pureos pureos 1</span><span class="hljs-string">.</span><span class="hljs-comment">8M  1月  8 14:55 test10</span><span class="hljs-string">.</span><span class="hljs-comment">exe</span><br><span class="hljs-literal">-</span><span class="hljs-comment">rw</span><span class="hljs-literal">-</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span>  <span class="hljs-comment">1 pureos pureos 1</span><span class="hljs-string">.</span><span class="hljs-comment">6M  1月  8 14:55 test11</span><span class="hljs-string">.</span><span class="hljs-comment">exe</span><br><span class="hljs-literal">-</span><span class="hljs-comment">rw</span><span class="hljs-literal">-</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span>  <span class="hljs-comment">1 pureos pureos 1</span><span class="hljs-string">.</span><span class="hljs-comment">9M  1月  8 14:55 test12</span><span class="hljs-string">.</span><span class="hljs-comment">exe</span><br><span class="hljs-literal">-</span><span class="hljs-comment">rw</span><span class="hljs-literal">-</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span>  <span class="hljs-comment">1 pureos pureos 484K  1月  8 14:53 test13</span><span class="hljs-string">.</span><span class="hljs-comment">exe</span><br><span class="hljs-literal">-</span><span class="hljs-comment">rw</span><span class="hljs-literal">-</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span>  <span class="hljs-comment">1 pureos pureos 1</span><span class="hljs-string">.</span><span class="hljs-comment">1M  1月  8 14:52 test14</span><span class="hljs-string">.</span><span class="hljs-comment">exe</span><br><span class="hljs-literal">-</span><span class="hljs-comment">rw</span><span class="hljs-literal">-</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span>  <span class="hljs-comment">1 pureos pureos 1</span><span class="hljs-string">.</span><span class="hljs-comment">6M  1月  8 14:55 test15</span><span class="hljs-string">.</span><span class="hljs-comment">exe</span><br><span class="hljs-literal">-</span><span class="hljs-comment">rw</span><span class="hljs-literal">-</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span>  <span class="hljs-comment">1 pureos pureos 1</span><span class="hljs-string">.</span><span class="hljs-comment">9M  1月  8 14:55 test1</span><span class="hljs-string">.</span><span class="hljs-comment">exe</span><br><span class="hljs-literal">-</span><span class="hljs-comment">rw</span><span class="hljs-literal">-</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span>  <span class="hljs-comment">1 pureos pureos 1</span><span class="hljs-string">.</span><span class="hljs-comment">4M  1月  8 14:53 test2</span><span class="hljs-string">.</span><span class="hljs-comment">exe</span><br><span class="hljs-literal">-</span><span class="hljs-comment">rw</span><span class="hljs-literal">-</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span>  <span class="hljs-comment">1 pureos pureos 1</span><span class="hljs-string">.</span><span class="hljs-comment">7M  1月  8 14:54 test3</span><span class="hljs-string">.</span><span class="hljs-comment">exe</span><br><span class="hljs-literal">-</span><span class="hljs-comment">rw</span><span class="hljs-literal">-</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span>  <span class="hljs-comment">1 pureos pureos 1</span><span class="hljs-string">.</span><span class="hljs-comment">5M  1月  8 14:55 test4</span><span class="hljs-string">.</span><span class="hljs-comment">exe</span><br><span class="hljs-literal">-</span><span class="hljs-comment">rw</span><span class="hljs-literal">-</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span>  <span class="hljs-comment">1 pureos pureos 1</span><span class="hljs-string">.</span><span class="hljs-comment">6M  1月  8 14:52 test5</span><span class="hljs-string">.</span><span class="hljs-comment">exe</span><br><span class="hljs-literal">-</span><span class="hljs-comment">rw</span><span class="hljs-literal">-</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span>  <span class="hljs-comment">1 pureos pureos 1</span><span class="hljs-string">.</span><span class="hljs-comment">9M  1月  8 14:55 test6</span><span class="hljs-string">.</span><span class="hljs-comment">exe</span><br><span class="hljs-literal">-</span><span class="hljs-comment">rw</span><span class="hljs-literal">-</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span>  <span class="hljs-comment">1 pureos pureos 2</span><span class="hljs-string">.</span><span class="hljs-comment">2M  1月  8 14:55 test7</span><span class="hljs-string">.</span><span class="hljs-comment">exe</span><br><span class="hljs-literal">-</span><span class="hljs-comment">rw</span><span class="hljs-literal">-</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span>  <span class="hljs-comment">1 pureos pureos 1</span><span class="hljs-string">.</span><span class="hljs-comment">9M  1月  8 14:55 test8</span><span class="hljs-string">.</span><span class="hljs-comment">exe</span><br><span class="hljs-literal">-</span><span class="hljs-comment">rw</span><span class="hljs-literal">-</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span>  <span class="hljs-comment">1 pureos pureos 2</span><span class="hljs-string">.</span><span class="hljs-comment">1M  1月  8 14:55 test9</span><span class="hljs-string">.</span><span class="hljs-comment">exe</span><br></code></pre></td></tr></table></figure><p>可以看到有 16 个文件，并且大小是一直在增长的。那我们就静静等待下载完成就好啦！</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>通过这样一个简单的 Demo 实现了 libcurl 的多线程下载，但是在实际的业务流程中，还需要增加几点功能，提高程序的鲁棒性。如：</p><ul><li>控制线程的 curl 的下载超时时间</li><li>增加下载失败监测机制，针对某个包下载失败可以重新单独下载</li><li>增加文件下载校验，如引入 MD5 校验，防止因网络传输问题导致包损坏。</li></ul><h1 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h1><p><a href="https://www.cnblogs.com/thankvincisdaily/p/16357902.html">【C++】使用 libcurl 来实现多线程下载的功能</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;事情是这样的，笔者在实现一个下载功能的时候遇到一个问题：服务器对下载速率进行了限制，对于业务上的文件下载，是不确定大小的，只能从服务器请求下载的时候才能知道需要下载的文件大小。如果使用单线程下载的话，用户体验非常差，因此需要实现多线程下载的功能。&lt;/p&gt;
&lt;h1 id=&quot;获</summary>
      
    
    
    
    
    <category term="C" scheme="https://kydins.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>007-让你的 LVGL 折线图支持浮点数显示</title>
    <link href="https://kydins.com/posts/f21ee470.html"/>
    <id>https://kydins.com/posts/f21ee470.html</id>
    <published>2024-01-12T19:03:54.000Z</published>
    <updated>2024-03-23T14:50:47.443Z</updated>
    
    <content type="html"><![CDATA[<p>今天在做显示屏的时候发现，LVGL V8.2 的折线图 y 轴居然不能支持显示浮点数，于是研究了一下，发现还是有一些奇技淫巧来实现的。</p><h1 id="原始代码"><a href="#原始代码" class="headerlink" title="原始代码"></a>原始代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> tiks)</span> &#123;<br>  <span class="hljs-type">float</span> real = json_object_get_double(val);<br>  lv_chart_set_next_value(ui.chart_data, ui.chart_data_dot, real);<br><br>  lv_chart_set_axis_tick(ui.chart_data, LV_CHART_AXIS_PRIMARY_Y, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>, tiks, <span class="hljs-number">2</span>,<br>                         <span class="hljs-literal">true</span>, <span class="hljs-number">100</span>);<br>  lv_chart_set_range(ui.chart_data, LV_CHART_AXIS_PRIMARY_Y, min_data,<br>                     max_data);<br>  lv_obj_add_event_cb(ui.chart_data, chart_event_cb, LV_EVENT_ALL, <span class="hljs-literal">NULL</span>);<br>  lv_obj_refresh_ext_draw_size(ui.chart_data);<br>  lv_chart_set_update_mode(ui.chart_data, LV_CHART_UPDATE_MODE_CIRCULAR);<br>  lv_chart_set_zoom_x(ui.chart_data, <span class="hljs-number">700</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>查看图标设置函数定义可以发现，只接受整数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">lv_chart_set_next_value</span><span class="hljs-params">(<span class="hljs-type">lv_obj_t</span> * obj, <span class="hljs-type">lv_chart_series_t</span> * ser, <span class="hljs-type">lv_coord_t</span> value)</span><br>&#123;<br>    LV_ASSERT_OBJ(obj, MY_CLASS);<br>    LV_ASSERT_NULL(ser);<br><br>    <span class="hljs-type">lv_chart_t</span> * chart  = (<span class="hljs-type">lv_chart_t</span> *)obj;<br>    ser-&gt;y_points[ser-&gt;start_point] = value;<br>    invalidate_point(obj, ser-&gt;start_point);<br>    ser-&gt;start_point = (ser-&gt;start_point + <span class="hljs-number">1</span>) % chart-&gt;point_cnt;<br>    invalidate_point(obj, ser-&gt;start_point);<br>    lv_chart_refresh(obj);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">if</span> LV_USE_LARGE_COORD</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int32_t</span> <span class="hljs-type">lv_coord_t</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int16_t</span> <span class="hljs-type">lv_coord_t</span>;<br><span class="hljs-meta">#endifc</span><br></code></pre></td></tr></table></figure><p>在网上搜了一下，LVGL 似乎不支持图标直接存放浮点数，但是我们可以通过乘以 100 来存入，读出来的时候再除以 100。</p><h1 id="实现浮点数显示"><a href="#实现浮点数显示" class="headerlink" title="实现浮点数显示"></a>实现浮点数显示</h1><p>首先，将 lv_conf.h 中的浮点数支持开启</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> LV_SPRINTF_USE_FLOAT 1</span><br></code></pre></td></tr></table></figure><p>这样 lv_snprintf 函数才能支持%f，存入图表的时候乘以 100 来存入。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> tiks)</span> &#123;<br>  <span class="hljs-type">float</span> real = json_object_get_double(val) * <span class="hljs-number">100</span>;<br>  lv_chart_set_next_value(ui.chart_data, ui.chart_data_dot, real);<br><br>  lv_chart_set_axis_tick(ui.chart_data, LV_CHART_AXIS_PRIMARY_Y, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>, tiks, <span class="hljs-number">2</span>,<br>                         <span class="hljs-literal">true</span>, <span class="hljs-number">100</span>);<br>  lv_chart_set_range(ui.chart_data, LV_CHART_AXIS_PRIMARY_Y, min_data,<br>                     max_data);<br>  lv_obj_add_event_cb(ui.chart_data, chart_event_cb, LV_EVENT_ALL, <span class="hljs-literal">NULL</span>);<br>  lv_obj_refresh_ext_draw_size(ui.chart_data);<br>  lv_chart_set_update_mode(ui.chart_data, LV_CHART_UPDATE_MODE_CIRCULAR);<br>  lv_chart_set_zoom_x(ui.chart_data, <span class="hljs-number">700</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>lv_chart_set_axis_tick 中，label_en 表示是否显示坐标轴，我们需要将坐标轴以浮点数形式显示。</p><p>修改 lvgl&#x2F;src&#x2F;extra&#x2F;widgets&#x2F;chart&#x2F;lv_chart.c 的 draw_y_ticks 函数，你的路径可能跟我不一样，但最终要改的函数都是 draw_y_ticks 这个函数。</p><p>这个函数用于绘制 y 轴坐标，我们需要将存入的乘以 100 的坐标再改为正常值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">将<br>lv_snprintf(buf, <span class="hljs-keyword">sizeof</span>(buf), <span class="hljs-string">&quot;%&quot;</span> LV_PRId32, tick_value);<br>改为<br>lv_snprintf(buf, <span class="hljs-keyword">sizeof</span>(buf), <span class="hljs-string">&quot;%.2f&quot;</span>, (<span class="hljs-type">float</span>)tick_value / <span class="hljs-number">100.0f</span>);<br></code></pre></td></tr></table></figure><p>现在显示的页面就是正常的了，但是我还有一个点击事件的需要修改，这是为了让用户在点击或者拖动折线图的时候，点位的上方可以出现一个标签显示该点位的值。先看一下我之前的写法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @description: 折线图点击、拖动事件</span><br><span class="hljs-comment"> * @param &#123;lv_event_t&#125; *e</span><br><span class="hljs-comment"> * @return &#123;*&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">chart_event_cb</span><span class="hljs-params">(<span class="hljs-type">lv_event_t</span> *e)</span> &#123;<br>  <span class="hljs-type">lv_event_code_t</span> code = lv_event_get_code(e);<br>  <span class="hljs-type">lv_obj_t</span> *chart = lv_event_get_target(e);<br><br>  <span class="hljs-keyword">if</span> (code == LV_EVENT_VALUE_CHANGED) &#123;<br>    lv_obj_invalidate(chart);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (code == LV_EVENT_REFR_EXT_DRAW_SIZE) &#123;<br>    <span class="hljs-type">lv_coord_t</span> *s = lv_event_get_param(e);<br>    *s = LV_MAX(*s, <span class="hljs-number">20</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (code == LV_EVENT_DRAW_POST_END) &#123;<br>    <span class="hljs-type">int32_t</span> id = lv_chart_get_pressed_point(chart);<br>    <span class="hljs-keyword">if</span> (id == LV_CHART_POINT_NONE) <span class="hljs-keyword">return</span>;<br><br>    LV_LOG_USER(<span class="hljs-string">&quot;Selected point %d&quot;</span>, (<span class="hljs-type">int</span>)id);<br><br>    <span class="hljs-type">lv_chart_series_t</span> *ser = lv_chart_get_series_next(chart, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">while</span> (ser) &#123;<br>      <span class="hljs-type">lv_point_t</span> p;<br>      lv_chart_get_point_pos_by_id(chart, ser, id, &amp;p);<br><br>      <span class="hljs-type">lv_coord_t</span> *y_array = lv_chart_get_y_array(chart, ser);<br>      <span class="hljs-type">lv_coord_t</span> value = y_array[id];<br>      <span class="hljs-keyword">if</span> (value == LV_CHART_POINT_NONE) <span class="hljs-keyword">return</span>;<br><br>      <span class="hljs-type">char</span> buf[<span class="hljs-number">32</span>];<br>      lv_snprintf(buf, <span class="hljs-keyword">sizeof</span>(buf), LV_SYMBOL_DUMMY <span class="hljs-string">&quot;%d&quot;</span>, value);<br><br>      <span class="hljs-type">lv_draw_rect_dsc_t</span> draw_rect_dsc;<br>      lv_draw_rect_dsc_init(&amp;draw_rect_dsc);<br>      draw_rect_dsc.bg_color = lv_color_black();<br>      draw_rect_dsc.bg_opa = LV_OPA_50;<br>      draw_rect_dsc.radius = <span class="hljs-number">3</span>;<br>      draw_rect_dsc.bg_img_src = buf;<br>      draw_rect_dsc.bg_img_recolor = lv_color_white();<br><br>      <span class="hljs-type">lv_area_t</span> a;<br>      a.x1 = chart-&gt;coords.x1 + p.x - <span class="hljs-number">20</span>;<br>      a.x2 = chart-&gt;coords.x1 + p.x + <span class="hljs-number">20</span>;<br>      a.y1 = chart-&gt;coords.y1 + p.y - <span class="hljs-number">30</span>;<br>      a.y2 = chart-&gt;coords.y1 + p.y - <span class="hljs-number">10</span>;<br><br>      <span class="hljs-type">lv_draw_ctx_t</span> *draw_ctx = lv_event_get_draw_ctx(e);<br>      lv_draw_rect(draw_ctx, &amp;draw_rect_dsc, &amp;a);<br><br>      ser = lv_chart_get_series_next(chart, ser);<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (code == LV_EVENT_RELEASED) &#123;<br>    lv_obj_invalidate(chart);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在也是一样的，要先除以 100 获取到原本的值再显示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">将<br>lv_snprintf(buf, <span class="hljs-keyword">sizeof</span>(buf), LV_SYMBOL_DUMMY <span class="hljs-string">&quot;%d&quot;</span>, value);<br>改为<br>lv_snprintf(buf, <span class="hljs-keyword">sizeof</span>(buf), LV_SYMBOL_DUMMY <span class="hljs-string">&quot;%.2f&quot;</span>, (<span class="hljs-type">float</span>)value / <span class="hljs-number">100.0f</span>);<br></code></pre></td></tr></table></figure><h2 id="说在最后"><a href="#说在最后" class="headerlink" title="说在最后"></a>说在最后</h2><p>查资料的时候发现 LVGL 9 要推出了，希望新版本能提供原生支持吧。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://forum.lvgl.io/t/chart-display-floats-temperature-values-with-decimal-places/9097/2">https://forum.lvgl.io/t/chart-display-floats-temperature-values-with-decimal-places/9097/2</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天在做显示屏的时候发现，LVGL V8.2 的折线图 y 轴居然不能支持显示浮点数，于是研究了一下，发现还是有一些奇技淫巧来实现的。&lt;/p&gt;
&lt;h1 id=&quot;原始代码&quot;&gt;&lt;a href=&quot;#原始代码&quot; class=&quot;headerlink&quot; title=&quot;原始代码&quot;&gt;&lt;/a</summary>
      
    
    
    
    
    <category term="C" scheme="https://kydins.com/tags/C/"/>
    
    <category term="LVGL" scheme="https://kydins.com/tags/LVGL/"/>
    
  </entry>
  
  <entry>
    <title>006-在 OpenWrt 中使用 mwan3 设置链路切换</title>
    <link href="https://kydins.com/posts/f24d1411.html"/>
    <id>https://kydins.com/posts/f24d1411.html</id>
    <published>2024-01-09T01:16:04.000Z</published>
    <updated>2024-03-24T04:21:06.768Z</updated>
    
    <content type="html"><![CDATA[<p>笔者在使用 mwan3 的过程中遇到了一个非常低级的问题，深感自己的网络基础知识还是不够扎实，特此记录。</p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在 OpenWrt 系统中使用 mwan3 软件进行链路管理，设备连接 Wi-Fi 和 USB 模块进行拨号上网。</p><p>需设置移动网络的优先级为高，Wi-Fi 的优先级低，若此时移动网络断开连接，应无缝切换到 Wi-Fi。</p><p>测试指标为 ping 外网的过程中不应断开。</p><p>实际测试中发现，断开移动网络，无法实现无缝切换，且 Wi-Fi 接口已经连接的情况下，无法手动 ping 通外网。</p><p><img src="https://image.kydins.com/006-network_topology_diagram.png" alt="网络拓扑图"></p><h1 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h1><p>首先看一下我的配置文件吧：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@openwrt:~# cat /etc/config/mwan3 <br><br>config globals &#x27;globals&#x27;<br>        option mmx_mask &#x27;0x3F00&#x27;<br>        option rtmon_interval &#x27;5&#x27;<br><br>config interface &#x27;wan&#x27;<br>        option enabled &#x27;0&#x27;<br>        option family &#x27;ipv4&#x27;<br>        option reliability &#x27;1&#x27;<br>        option count &#x27;1&#x27;<br>        option timeout &#x27;4&#x27;<br>        option interval &#x27;10&#x27;<br>        option down &#x27;3&#x27;<br>        option up &#x27;2&#x27;<br>        option seamless &#x27;1&#x27;<br>        list track_ip &#x27;8.8.8.8&#x27;<br>        list flush_conntrack &#x27;ifup&#x27;<br>        list flush_conntrack &#x27;ifdown&#x27;<br><br>config interface &#x27;wwan&#x27;<br>        option family &#x27;ipv4&#x27;<br>        option reliability &#x27;1&#x27;<br>        option count &#x27;1&#x27;<br>        option timeout &#x27;4&#x27;<br>        option interval &#x27;10&#x27;<br>        option down &#x27;3&#x27;<br>        option up &#x27;2&#x27;<br>        option seamless &#x27;1&#x27;<br>        option enabled &#x27;1&#x27;<br>        option add_track_route &#x27;0&#x27;<br>        list track_ip &#x27;8.8.8.8&#x27;<br>        list flush_conntrack &#x27;ifup&#x27;<br>        list flush_conntrack &#x27;ifdown&#x27;<br><br>config interface &#x27;wwlan&#x27;<br>        option family &#x27;ipv4&#x27;<br>        option reliability &#x27;1&#x27;<br>        option count &#x27;1&#x27;<br>        option timeout &#x27;4&#x27;<br>        option interval &#x27;10&#x27;<br>        option down &#x27;3&#x27;<br>        option up &#x27;2&#x27;<br>        option seamless &#x27;1&#x27;<br>        option enabled &#x27;1&#x27;<br>        list track_ip &#x27;8.8.8.8&#x27;<br>        option add_track_route &#x27;0&#x27;<br>        list flush_conntrack &#x27;ifup&#x27;<br>        list flush_conntrack &#x27;ifdown&#x27;<br><br>config member &#x27;wan_mw&#x27;<br>        option interface &#x27;wan&#x27;<br>        option metric &#x27;1&#x27;<br>        option weight &#x27;3&#x27;<br><br>config member &#x27;wwan_mw&#x27;<br>        option interface &#x27;wwan&#x27;<br>        option metric &#x27;2&#x27;<br>        option weight &#x27;3&#x27;<br><br>config member &#x27;wwlan_mw&#x27;<br>        option interface &#x27;wwlan&#x27;<br>        option metric &#x27;3&#x27;<br>        option weight &#x27;3&#x27;<br><br>config policy &#x27;default&#x27;<br>        option last_resort &#x27;default&#x27;<br>        list use_member &#x27;wan_mw&#x27;<br>        list use_member &#x27;wwan_mw&#x27;<br>        list use_member &#x27;wwlan_mw&#x27;<br><br>config rule &#x27;https&#x27;<br>        option sticky &#x27;1&#x27;<br>        option dest_port &#x27;443&#x27;<br>        option proto &#x27;tcp&#x27;<br>        option use_policy &#x27;default&#x27;<br><br>config rule &#x27;default_rule&#x27;<br>        option dest_ip &#x27;0.0.0.0/0&#x27;<br>        option use_policy &#x27;default&#x27;<br></code></pre></td></tr></table></figure><p>我配置了优先走移动网络，移动网络断口后无缝切换为 Wi-Fi，但发现断开移动网络后，网络直接就断开了。</p><p>此时查看路由表发现，没有默认路由：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@openwrt:~# route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>192.168.0.0     0.0.0.0         255.255.255.0   U     11     0        0 wlan0<br>192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 br-lan<br></code></pre></td></tr></table></figure><p>这就奇怪了，且禁用移动网络，重启 Wi-Fi 试试看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@openwrt:~# ifup wwlan<br>root@openwrt:~# route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         192.168.0.1     0.0.0.0         UG    11     0        0 wlan0<br>192.168.0.0     0.0.0.0         255.255.255.0   U     11     0        0 wlan0<br>192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 br-lan<br></code></pre></td></tr></table></figure><p>是有默认路由的，那开启移动网络，再次查看路由表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@openwrt:~# route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         10.137.155.2    0.0.0.0         UG    11     0        0 usb0<br>10.137.155.2    0.0.0.0         255.255.255.254 U     11     0        0 usb0<br>192.168.0.0     0.0.0.0         255.255.255.0   U     11     0        0 wlan0<br>192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 br-lan<br></code></pre></td></tr></table></figure><p>发现居然 Wi-Fi 的默认路由没了？？？</p><p>原来是移动网络和 Wi-Fi 的跃点相同了，都是 11，导致只会存在 1 个默认路由。</p><h1 id="什么是跃点？"><a href="#什么是跃点？" class="headerlink" title="什么是跃点？"></a>什么是跃点？</h1><p>引用自百度百科：</p><blockquote><p>跃点：即路由。一个路由为一个跃点。<a href="https://baike.baidu.com/item/%E4%BC%A0%E8%BE%93%E8%BF%87%E7%A8%8B/22722988?fromModule=lemma_inlink">传输过程</a>中需要经过多个网络，每个被经过的<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87/7667828?fromModule=lemma_inlink">网络设备</a>点（有能力路由的）叫做一个跃点，地址就是它的 ip。跃点数是经过了多少个跃点的<a href="https://baike.baidu.com/item/%E7%B4%AF%E5%8A%A0%E5%99%A8/8590163?fromModule=lemma_inlink">累加器</a>，为了防止无用的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%8C%85/489739?fromModule=lemma_inlink">数据包</a>在网上流散。为路由指定所需跃点数的整数值（范围是 1 ~ 9999），它用来在<a href="https://baike.baidu.com/item/%E8%B7%AF%E7%94%B1%E8%A1%A8/2707408?fromModule=lemma_inlink">路由表</a>里的多个路由中选择与转发包中的目标地址最为匹配的路由。所选的路由具有最少的跃点数。跃点数能够反映跃点的数量、路径的速度、路径可靠性、路径<a href="https://baike.baidu.com/item/%E5%90%9E%E5%90%90%E9%87%8F/157092?fromModule=lemma_inlink">吞吐量</a>以及管理属性。</p></blockquote><p>按笔者自己的理解，可以约等于权重，跃点越大权重越低，优先走跃点小的。</p><p>因此，将移动网络的网关跃点修改为 10，Wi-Fi 接口的网关跃点保持 11 不变。</p><p>查看路由表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@openwrt:~# route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         10.108.180.39   0.0.0.0         UG    10     0        0 usb0<br>0.0.0.0         192.168.0.1     0.0.0.0         UG    11     0        0 wlan0<br>10.108.180.38   0.0.0.0         255.255.255.254 U     10     0        0 usb0<br>192.168.0.0     0.0.0.0         255.255.255.0   U     11     0        0 wlan0<br>192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 br-lan<br></code></pre></td></tr></table></figure><p>可以看到，现在已经正常有两个默认路由了，并且移动网络的默认路由是在 Wi-Fi 上面的。这也符合我 mwan3 配置的需求：先走移动网络，没有移动网络后走 Wi-Fi。</p><p>此时在后台 ping 外网，然后断开移动网络，可以看到 ping 是不会断的，自动走 Wi-Fi 出去了。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://baike.baidu.com/item/%E8%B7%83%E7%82%B9%E6%95%B0/4941127">百度百科 - 跃点数</a></p><p><a href="https://openwrt.org/docs/guide-user/network/wan/multiwan/mwan3">OpenWrt-mwan3</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;笔者在使用 mwan3 的过程中遇到了一个非常低级的问题，深感自己的网络基础知识还是不够扎实，特此记录。&lt;/p&gt;
&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;在 </summary>
      
    
    
    
    
    <category term="OpenWrt" scheme="https://kydins.com/tags/OpenWrt/"/>
    
  </entry>
  
  <entry>
    <title>005-PT 入坑指北</title>
    <link href="https://kydins.com/posts/ba251e26.html"/>
    <id>https://kydins.com/posts/ba251e26.html</id>
    <published>2023-12-29T00:57:43.000Z</published>
    <updated>2024-03-23T14:48:10.052Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PT-入坑指北"><a href="#PT-入坑指北" class="headerlink" title="PT 入坑指北"></a>PT 入坑指北</h1><h2 id="一、什么是-PT？"><a href="#一、什么是-PT？" class="headerlink" title="一、什么是 PT？"></a>一、什么是 PT？</h2><p>PT（Private Tracker）是一种改良自 BitTorrent 协议的 P2P 下载方式。<code>Private Tracker</code>指私有种子服务器，与 BT 最大的不同点分别为可进行私密范围下载，及可统计每个用户的上载及下载量。</p><h2 id="二、PT-怎么玩？"><a href="#二、PT-怎么玩？" class="headerlink" title="二、PT 怎么玩？"></a>二、PT 怎么玩？</h2><p><strong>PT 站是在私密范围内下载</strong></p><ul><li>只允许本站用户下载，不允许用户将种子公开上传</li><li>PT 站需要内部邀请或者捐赠的形式获得邀请码</li></ul><p>统计上传量和下载量</p><ul><li>网站会统计每一个用户的下载量和上传量，下载量和上传量在一定程度上决定着用户的等级，有没有权限下载文件</li><li>每一个用户注册后会得到一个 passkey，用户从网站里面下载的种子里面包含了私人的 passkey</li><li>通过 passkey 识别每一个用户，统计每一个用户的下载、上传和做种时间</li><li>PT 站是「人人为我，我为人人」的资源共享 Team</li></ul><p>新手的话可以先从一些小站开始玩起，将自己的数据养好之后再去各类论坛找大佬求邀请码。</p><h2 id="三、对于新手应该需要知道的"><a href="#三、对于新手应该需要知道的" class="headerlink" title="三、对于新手应该需要知道的"></a>三、对于新手应该需要知道的</h2><p>1、<strong>魔力值</strong>：相当于货币，一般可以通过坚持每日签到&#x2F;做种获得。可以在站内购买上传量&#x2F;下载量&#x2F;邀请名额。</p><ul><li><p>1 个魔力值 * <em>你的做种数</em> (做种数最多计 7 个)</p></li><li><p>每小时获得的魔力值点数由下面的公式给出： </p><p>式中简言之：为做种人数少、文件体积大的种子做种能获得更多魔力值。</p><p><img src="https://image.kydins.com/005-formula.png" alt="formula"></p><ul><li>**A **为中间变量</li><li><strong>Ti</strong> 为第 **i **个种子的生存时间，即自种子发布起到现在所经过的时间，单位是周</li><li><strong>T0 <strong>为参数。</strong>T0</strong> &#x3D; 8</li><li>**Si **为第 <strong>i</strong> 个种子的大小，单位是 GB</li><li><strong>Ni</strong> 为第 <strong>i</strong> 个种子当前的做种者数</li><li><strong>N0 <strong>为参数。</strong>N0</strong> &#x3D; 7</li><li><strong>Wi</strong> 为第 <strong>i</strong> 个种子的权重系数，默认为 1，零魔种子为 0.2</li></ul><p>做种每小时将得到如下的魔力值</p><ul><li>**B **为 1 小时中用户获得的做种魔力值点数</li><li><strong>B0</strong> 为参数，代表用户 1 小时获得魔力值的上限。<strong>B0</strong> &#x3D; 100</li><li><strong>L <strong>为参数。</strong>L</strong> &#x3D; 300</li></ul><p><img src="https://image.kydins.com/005-formula2.png" alt="formula2"></p></li></ul><p>2、<strong>上传量</strong>：就是你做种上传了多少 G 的资源</p><p>3、<strong>下载量</strong>：你从 pt 站下载了多少 G 的资源</p><p>4、<strong>分享率</strong>：上传量&#x2F;下载量，区分你的整体分享率和独立分享率是很重要的。整体分享率关注的是自从你加入站点以来，账号的整体上传与下载量。而独立分享率则针对每一个你正在下载或做种的文件。</p><p>5、你应该保持一个<strong>良好的分享率</strong>，防止被当作吸血鬼 t 掉，所以你需要了解什么是 <code>[Free] [2x免费] [50%免费]</code></p><p>[Free]：这个资源下载是免费的 (不计入下载量)，1 倍上传量。</p><p>[2x 免费]：这个资源下载是免费的 (不计入下载量)，2 倍上传量。</p><p>[50% 免费]：这个资源 0.5 倍下载量，1 倍上传量。</p><p>新手度过考核期可以一定不要放过这类资源，前期可以快速将上传量刷上去。</p><h2 id="四、软件的选择"><a href="#四、软件的选择" class="headerlink" title="四、软件的选择"></a>四、软件的选择</h2><p>一般来说每个 pt 站对于允许使用的软件都是有要求的，这里需要大家根据情况选择。</p><p>我一般会使用开源软件 <a href="https://transmissionbt.com/">Transmission</a>，注意，<strong>请不要使用迅雷！</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PT-入坑指北&quot;&gt;&lt;a href=&quot;#PT-入坑指北&quot; class=&quot;headerlink&quot; title=&quot;PT 入坑指北&quot;&gt;&lt;/a&gt;PT 入坑指北&lt;/h1&gt;&lt;h2 id=&quot;一、什么是-PT？&quot;&gt;&lt;a href=&quot;#一、什么是-PT？&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="PT" scheme="https://kydins.com/tags/PT/"/>
    
  </entry>
  
  <entry>
    <title>004-ModBus 报文解析实战</title>
    <link href="https://kydins.com/posts/f2557fcc.html"/>
    <id>https://kydins.com/posts/f2557fcc.html</id>
    <published>2023-10-08T01:07:07.000Z</published>
    <updated>2024-03-24T04:21:06.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ModBus-报文解析实战"><a href="#ModBus-报文解析实战" class="headerlink" title="ModBus 报文解析实战"></a>ModBus 报文解析实战</h1><p>事情是这样的，项目需要一个串口采集 1032 协议电压的功能。在实现中还是遇到不少问题，由于是第一次使用，遂做下一些记录。</p><p><img src="https://image.kydins.com/004-modbusslave-hex.png" alt="ModBus 模拟量 Hex"></p><p><img src="https://image.kydins.com/004-modbusslave-float.png" alt="ModBus 模拟量 Float"></p><h2 id="报文内容"><a href="#报文内容" class="headerlink" title="报文内容"></a>报文内容</h2><p>使用串口发送 ModBus 报文时，需要解析收到的报文</p><blockquote><p>01 03 04 00 00 41 40 CB 93</p></blockquote><p>这是请求报文：</p><ul><li>01：设备地址，表示要访问的 Modbus 设备的地址为 1。</li><li>03：功能码，表示要读取保持寄存器。</li><li>00 00：起始地址，表示要读取的保持寄存器的起始地址为 0。</li><li>00 02：寄存器数量，表示要读取的保持寄存器数量为 2。</li><li>C4 0B：CRC 校验码，用于验证报文的正确性。</li></ul><p>返回报文：</p><ul><li>01：设备地址，表示返回的报文是来自地址为 1 的 Modbus 设备。</li><li>03：功能码，表示返回的报文是读取保持寄存器的响应报文。</li><li>04：字节数，表示返回的数据字节数为 4。</li><li>00 00：寄存器值，表示起始地址为 0 的第一个保持寄存器的值。</li><li>41 40：寄存器值，表示起始地址为 1 的第二个保持寄存器的值。</li><li>CB 93：CRC 校验码，用于验证报文的正确性。</li></ul><h2 id="解析返回报文"><a href="#解析返回报文" class="headerlink" title="解析返回报文"></a>解析返回报文</h2><p>由于我只需要采集单路 ModBus 所以我的请求报文是固定的。因此我的返回报文的头部内容也是固定的。</p><p>所以我们需要解析的数据就是</p><blockquote><p>00 00 41 40</p><p>注意：这是 IEEE 754 浮点数</p></blockquote><p>这就是我们需要的电压数据。其实很简单，只需要做一个十六进制转 float 就可以。</p><p><img src="https://image.kydins.com/004-float-to-hex.jpg" alt="12 转 hex"></p><p>细心的朋友可能发现了，我是使用 41400000 转换的，这是为什么呢？</p><p>这是因为我的 float 格式为 CDAB（这是等到最后才发现的）</p><h2 id="C-语言代码实现"><a href="#C-语言代码实现" class="headerlink" title="C 语言代码实现"></a>C 语言代码实现</h2><h3 id="使用共用体进行类型转换"><a href="#使用共用体进行类型转换" class="headerlink" title="使用共用体进行类型转换"></a>使用共用体进行类型转换</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-type">uint8_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> <span class="hljs-type">uint16_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-type">uint32_t</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> &#123;<br>  <span class="hljs-type">uint8_t</span> rsp[] = &#123;<span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x40</span>&#125;;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先要明确的是，直接使用强制类型转换是不行的。直接看代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-type">uint8_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> <span class="hljs-type">uint16_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-type">uint32_t</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>  <span class="hljs-type">uint32_t</span> u32;<br>  <span class="hljs-type">float</span> f;<br>&#125; <span class="hljs-type">float_union_t</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">float</span> <span class="hljs-title function_">utils_get_float_at</span><span class="hljs-params">(<span class="hljs-type">void</span> *data, <span class="hljs-type">int</span> pos)</span> &#123;<br>  <span class="hljs-type">uint8_t</span> __attribute__((aligned(<span class="hljs-number">4</span>))) tmp[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-built_in">memcpy</span>(tmp, (<span class="hljs-type">uint8_t</span> *)data, <span class="hljs-number">4</span>);<br>  <span class="hljs-type">uint32_t</span> lw = *((<span class="hljs-type">uint32_t</span> *)(((<span class="hljs-type">uint8_t</span> *)(tmp)) + pos));<br>  <span class="hljs-type">float_union_t</span> fu = &#123;.u32 = lw&#125;;<br>  <span class="hljs-keyword">return</span> fu.f;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span> &#123;<br>  <span class="hljs-type">uint8_t</span> rsp[] = &#123;<span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x40</span>&#125;;<br>  <span class="hljs-type">float</span> value = utils_get_float_at(rsp, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;value = %f\n&quot;</span>, value);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">pureos@pureos:~$ gcc 1.c -o 1<br>pureos@pureos:~$ ./1<br>value = 3.015625<br></code></pre></td></tr></table></figure><p>可以看到我们按照正常的字节序转换出来的浮点数是错误的，将这个值转换为十六进制为：</p><blockquote><p>40 41 00 00</p></blockquote><p><img src="https://image.kydins.com/004-hex-to-float.png" alt="转 Hex"></p><h3 id="寻找正确的-12-000000"><a href="#寻找正确的-12-000000" class="headerlink" title="寻找正确的 12.000000"></a>寻找正确的 12.000000</h3><p>所以正确的<code>12.000000</code> 应该是多少呢？</p><p>使用以下函数查看一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-type">uint8_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> <span class="hljs-type">uint16_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-type">uint32_t</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>  <span class="hljs-type">uint32_t</span> u32;<br>  <span class="hljs-type">float</span> f;<br>&#125; <span class="hljs-type">float_union_t</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">float</span> <span class="hljs-title function_">utils_get_float_at</span><span class="hljs-params">(<span class="hljs-type">void</span> *data, <span class="hljs-type">int</span> pos)</span> &#123;<br>  <span class="hljs-type">uint8_t</span> __attribute__((aligned(<span class="hljs-number">4</span>))) tmp[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-built_in">memcpy</span>(tmp, (<span class="hljs-type">uint8_t</span> *)data, <span class="hljs-number">4</span>);<br>  <span class="hljs-type">uint32_t</span> lw = *((<span class="hljs-type">uint32_t</span> *)(((<span class="hljs-type">uint8_t</span> *)(tmp)) + pos));<br>  <span class="hljs-type">float_union_t</span> fu = &#123;.u32 = lw&#125;;<br>  <span class="hljs-keyword">return</span> fu.f;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">utils_set_float_at</span><span class="hljs-params">(<span class="hljs-type">void</span> *data, <span class="hljs-type">int</span> pos, <span class="hljs-type">float</span> value)</span> &#123;<br>  *((<span class="hljs-type">uint32_t</span> *)((<span class="hljs-type">uint8_t</span> *)(data) + pos)) = *(<span class="hljs-type">uint32_t</span> *)(&amp;value);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span> &#123;<br>  <span class="hljs-type">uint8_t</span> rsp[] = &#123;<span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x40</span>&#125;;<br>  <span class="hljs-type">float</span> value = utils_get_float_at(rsp, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;value = %f\n&quot;</span>, value);<br><br>  <span class="hljs-type">uint8_t</span> float_to_hex_buf[<span class="hljs-number">4</span>];<br>  <span class="hljs-type">float</span> float_num = <span class="hljs-number">12.000000</span>;<br>  bzero(float_to_hex_buf, <span class="hljs-keyword">sizeof</span>(float_to_hex_buf));<br>  utils_set_float_at(float_to_hex_buf, <span class="hljs-number">0</span>, float_num);<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;float %f to hex = &quot;</span>, float_num);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.02hx &quot;</span>, float_to_hex_buf[i]);<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">pureos@pureos:~$ gcc 1.c -o 1<br>pureos@pureos:~$ ./1<br>value = 3.015625<br>float 12.000000 to hex = 00 00 40 41 <br></code></pre></td></tr></table></figure><p>现在已经非常清晰了，在我当前的环境中，需要将每位寄存器上的数据位互换位置。也就是两两之间互换。</p><p>原始数据：00 00 41 40</p><p>正确数据：00 00 40 41</p><p>然后将 uint8 的数据转为 uint16，这个时候就可以获取正确的数据了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-type">uint8_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> <span class="hljs-type">uint16_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-type">uint32_t</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>  <span class="hljs-type">uint32_t</span> u32;<br>  <span class="hljs-type">float</span> f;<br>&#125; <span class="hljs-type">float_union_t</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">float</span> <span class="hljs-title function_">utils_get_float_at</span><span class="hljs-params">(<span class="hljs-type">void</span> *data, <span class="hljs-type">int</span> pos)</span> &#123;<br>  <span class="hljs-type">uint8_t</span> __attribute__((aligned(<span class="hljs-number">4</span>))) tmp[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-built_in">memcpy</span>(tmp, (<span class="hljs-type">uint8_t</span> *)data, <span class="hljs-number">4</span>);<br>  <span class="hljs-type">uint32_t</span> lw = *((<span class="hljs-type">uint32_t</span> *)(((<span class="hljs-type">uint8_t</span> *)(tmp)) + pos));<br>  <span class="hljs-type">float_union_t</span> fu = &#123;.u32 = lw&#125;;<br>  <span class="hljs-keyword">return</span> fu.f;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">utils_set_float_at</span><span class="hljs-params">(<span class="hljs-type">void</span> *data, <span class="hljs-type">int</span> pos, <span class="hljs-type">float</span> value)</span> &#123;<br>  *((<span class="hljs-type">uint32_t</span> *)((<span class="hljs-type">uint8_t</span> *)(data) + pos)) = *(<span class="hljs-type">uint32_t</span> *)(&amp;value);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span> &#123;<br>  <span class="hljs-type">uint8_t</span> rsp[] = &#123;<span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x40</span>&#125;;<br>  <span class="hljs-type">float</span> value = utils_get_float_at(rsp, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;value = %f\n&quot;</span>, value);<br><br>  <span class="hljs-type">uint8_t</span> float_to_hex_buf[<span class="hljs-number">4</span>];<br>  <span class="hljs-type">float</span> float_num = <span class="hljs-number">12.000000</span>;<br>  bzero(float_to_hex_buf, <span class="hljs-keyword">sizeof</span>(float_to_hex_buf));<br>  utils_set_float_at(float_to_hex_buf, <span class="hljs-number">0</span>, float_num);<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;float %f to hex = &quot;</span>, float_num);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.02hx &quot;</span>, float_to_hex_buf[i]);<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>  <span class="hljs-type">uint16_t</span> dest[<span class="hljs-number">4</span>];<br>  bzero(dest, <span class="hljs-keyword">sizeof</span>(dest));<br>  <span class="hljs-type">int</span> rc = <span class="hljs-number">2</span>;<br>  <span class="hljs-type">int</span> offset = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; rc; i++) &#123;<br>    <span class="hljs-comment">/* shift reg hi_byte to temp OR with lo_byte */</span><br>    dest[i] = (rsp[(i &lt;&lt; <span class="hljs-number">1</span>)] &lt;&lt; <span class="hljs-number">8</span>) | rsp[offset + (i &lt;&lt; <span class="hljs-number">1</span>)];<br>  &#125;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.04hx &quot;</span>, dest[i]);<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>  value = utils_get_float_at(dest, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;value = %f\n&quot;</span>, value);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">pureos@pureos:~$ gcc 1.c -o 1<br>pureos@pureos:~$ ./1<br>value = 3.015625<br>float 12.000000 to hex = 00 00 40 41 <br>0000 4140 <br>value = 12.000000<br></code></pre></td></tr></table></figure><p>可以看到，我们已经正确解析出了电压值。</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-type">uint8_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> <span class="hljs-type">uint16_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-type">uint32_t</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>  <span class="hljs-type">uint32_t</span> u32;<br>  <span class="hljs-type">float</span> f;<br>&#125; <span class="hljs-type">float_union_t</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">float</span> <span class="hljs-title function_">utils_get_float_at</span><span class="hljs-params">(<span class="hljs-type">void</span> *data, <span class="hljs-type">int</span> pos)</span> &#123;<br>  <span class="hljs-type">uint8_t</span> __attribute__((aligned(<span class="hljs-number">4</span>))) tmp[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-built_in">memcpy</span>(tmp, (<span class="hljs-type">uint8_t</span> *)data, <span class="hljs-number">4</span>);<br>  <span class="hljs-type">uint32_t</span> lw = *((<span class="hljs-type">uint32_t</span> *)(((<span class="hljs-type">uint8_t</span> *)(tmp)) + pos));<br>  <span class="hljs-type">float_union_t</span> fu = &#123;.u32 = lw&#125;;<br>  <span class="hljs-keyword">return</span> fu.f;<br>&#125;<br><br><span class="hljs-comment">// true is little endian, flase is big endian</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">check_cpu</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">w</span> &#123;</span><br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-type">char</span> b;<br>  &#125; c;<br>  c.a = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> (c.b == <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> data[], <span class="hljs-type">int</span> num)</span> &#123;<br>  <span class="hljs-type">int</span> i, j;<br>  <span class="hljs-type">uint16_t</span> temp;<br><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>, j = num - <span class="hljs-number">1</span>; i &lt; j; i++, j--) &#123;<br>    temp = data[i];<br>    data[i] = data[j];<br>    data[j] = temp;<br>  &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span> &#123;<br>  <span class="hljs-type">int</span> rc = <span class="hljs-number">2</span>;<br>  <span class="hljs-type">int</span> offset = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">uint8_t</span> rsp[] = &#123;<span class="hljs-number">0x01</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x93</span>&#125;;<br>  <span class="hljs-type">uint16_t</span> dest[<span class="hljs-number">2</span>];<br><br>  bzero(dest, <span class="hljs-keyword">sizeof</span>(dest));<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; rc; i++) &#123;<br>    <span class="hljs-comment">/* shift reg hi_byte to temp OR with lo_byte */</span><br>    dest[i] = (rsp[offset + <span class="hljs-number">2</span> + (i &lt;&lt; <span class="hljs-number">1</span>)] &lt;&lt; <span class="hljs-number">8</span>) | rsp[offset + <span class="hljs-number">3</span> + (i &lt;&lt; <span class="hljs-number">1</span>)];<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (!check_cpu()) &#123;<br>    reverse(dest, <span class="hljs-number">2</span>);<br>  &#125;<br><br>  <span class="hljs-type">float</span> value = utils_get_float_at(dest, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;value = %f\n&quot;</span>, value);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>最后还加入了一个对 cpu 的大小端序判断，这样可用性和可移植性会更强。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ModBus-报文解析实战&quot;&gt;&lt;a href=&quot;#ModBus-报文解析实战&quot; class=&quot;headerlink&quot; title=&quot;ModBus 报文解析实战&quot;&gt;&lt;/a&gt;ModBus 报文解析实战&lt;/h1&gt;&lt;p&gt;事情是这样的，项目需要一个串口采集 1032 协议电</summary>
      
    
    
    
    
    <category term="C" scheme="https://kydins.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>003-入手 VPS 后要做的几件事</title>
    <link href="https://kydins.com/posts/8a304bd5.html"/>
    <id>https://kydins.com/posts/8a304bd5.html</id>
    <published>2023-10-03T04:52:38.000Z</published>
    <updated>2024-03-23T14:47:34.561Z</updated>
    
    <content type="html"><![CDATA[<h1 id="入手-VPS-后要做的几件事"><a href="#入手-VPS-后要做的几件事" class="headerlink" title="入手 VPS 后要做的几件事"></a>入手 VPS 后要做的几件事</h1><p>前几天新购买了一台小鸡，在首次使用时进行了一些配置上的修改，在这里与大家分享。按照本文章的操作，可以大大降低成为肉鸡的概率。</p><p>本文系统：Ubuntu 18.04</p><p><strong>注：本文代码块前的 $ 代表在终端中的输入指令，复制时请勿输入！</strong></p><h2 id="修改-root-密码"><a href="#修改-root-密码" class="headerlink" title="修改 root 密码"></a>修改 root 密码</h2><p>如果你的 VPS 提供商的机子没有 root 密码，一定一定要马上修改一个密码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">passwd</span><br>Enter new UNIX password: <br>Retype new UNIX password: <br>passwd: password updated successfully<br></code></pre></td></tr></table></figure><h2 id="创建管理员账号"><a href="#创建管理员账号" class="headerlink" title="创建管理员账号"></a>创建管理员账号</h2><p>这里的管理员是指，能够运行 sudo 命令的用户，为了安全，在正常使用中禁止使用 root 账号操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">adduser &lt;username&gt;</span><br>Enter new UNIX password: <br>Retype new UNIX password: <br><br>这里输入密码后可能还会提示需要输入用户的信息，回车默认即可<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">usermod -aG sudo &lt;username&gt; <span class="hljs-comment"># 为用户添加 sudo 权限</span></span><br></code></pre></td></tr></table></figure><h2 id="删除默认用户和组"><a href="#删除默认用户和组" class="headerlink" title="删除默认用户和组"></a>删除默认用户和组</h2><p>可以使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cat</span> /etc/passwd</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cat</span> /etc/group</span><br></code></pre></td></tr></table></figure><p>来分别查看用户列表和组列表</p><p>删除多余的用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">userdel <span class="hljs-built_in">sync</span> &amp;&amp; userdel shutdown &amp;&amp; userdel halt &amp;&amp; userdel uucp &amp;&amp; userdel operator &amp;&amp; userdel games &amp;&amp; userdel gopher</span><br></code></pre></td></tr></table></figure><p>删除多余组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">groupdel adm &amp;&amp; groupdel games &amp;&amp; groupdel lp &amp;&amp; groupdel dip</span><br></code></pre></td></tr></table></figure><p>删除了不必要的用户和组后，我们将用户管理的权限关闭</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">chattr +i /etc/passwd</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">chattr +i /etc/shadow</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">chattr +i /etc/group</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">chattr +i /etc/gshadow</span><br></code></pre></td></tr></table></figure><p>i 属性代表这个文件不允许被修改，删除。这样我们就无法给系统新建用户。需要新建用户的时候使用 -i 还原</p><h2 id="修改-SSH-配置"><a href="#修改-SSH-配置" class="headerlink" title="修改 SSH 配置"></a>修改 SSH 配置</h2><h3 id="添加-ssh-私钥"><a href="#添加-ssh-私钥" class="headerlink" title="添加 ssh 私钥"></a>添加 ssh 私钥</h3><p>在你的 windows 终端下生成一对私钥对，个人喜好使用 GitHub 推荐的 Ed25519 算法</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>ssh-keygen -t ed25519<br></code></pre></td></tr></table></figure><p>可以自己指定文件保存的路径，一般来说默认即可。之后询问是否输入密码，这里建议还是输入一个密码。</p><p>现在我们需要的私钥上传到服务器中，我直接上传到 home 目录下了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建 .ssh 文件夹</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> ~/.ssh</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> 700 ~/.ssh</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mv</span> id_ed25519 ~/.ssh/authorized_keys</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> 400 ~/.ssh/authorized_keys</span><br></code></pre></td></tr></table></figure><h3 id="禁用-root-登录及密码登录"><a href="#禁用-root-登录及密码登录" class="headerlink" title="禁用 root 登录及密码登录"></a>禁用 root 登录及密码登录</h3><p>在上传了 ssh 公钥后，我们需要关闭 root 账号的登录权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo vi /etc/ssh/sshd_config</span><br></code></pre></td></tr></table></figure><p>将<code>PermitRootLogin yes</code> 改为 <code>PermitRootLogin no</code> 关闭 root 登录<br>将<code>PasswordAuthentication yes</code> 改为 <code>PasswordAuthentication no</code> 关闭密码登录</p><p>在配置文件最后新增一行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ClientAliveInterval</span> <span class="hljs-number">60</span><br></code></pre></td></tr></table></figure><h3 id="修改-ssh-端口"><a href="#修改-ssh-端口" class="headerlink" title="修改 ssh 端口"></a>修改 ssh 端口</h3><p>同上一步，将 <code>Port 22</code> 改为任意没有被占用的端口，建议改成小众一点的</p><p>全部修改完成后，重启 ssh 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo service sshd restart</span><br></code></pre></td></tr></table></figure><p>可以重新连接一下，看是否修改成功</p><h2 id="安装-Fail2Ban"><a href="#安装-Fail2Ban" class="headerlink" title="安装 Fail2Ban"></a>安装 Fail2Ban</h2><p><a href="https://github.com/fail2ban/fail2ban">Fail2Ban</a> 是一款入侵防御软件，将尝试爆破 ssh 密码的 ip 封停，可以保护服务器免受暴力攻击。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt install fail2ban</span><br></code></pre></td></tr></table></figure><h2 id="安装长亭雷池-WAF"><a href="#安装长亭雷池-WAF" class="headerlink" title="安装长亭雷池 WAF"></a>安装长亭雷池 WAF</h2><p><a href="https://github.com/chaitin/safeline">雷池</a> 是一款足够简单、足够好用、足够强的免费 WAF。基于业界领先的语义引擎检测技术，作为反向代理接入，保护你的网站不受黑客攻击。</p><p>核心检测能力由智能语义分析算法驱动，专为社区而生，不让黑客越雷池半步。</p><h3 id="配置需求"><a href="#配置需求" class="headerlink" title="配置需求"></a>配置需求</h3><ul><li>操作系统：Linux</li><li>指令架构：x86_64</li><li>软件依赖：Docker 20.10.6 版本以上</li><li>软件依赖：Docker Compose 2.0.0 版本以上</li><li>最小化环境：1 核 CPU &#x2F; 1 GB 内存 &#x2F; 10 GB 磁盘</li></ul><h3 id="一键安装"><a href="#一键安装" class="headerlink" title="一键安装"></a>一键安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSLk https://waf-ce.chaitin.cn/release/latest/setup.sh)</span>&quot;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>更多安装方式请参考 <a href="https://waf-ce.chaitin.cn/posts/guide_install">安装雷池</a></p></blockquote><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>浏览器打开后台管理页面 <code>https://&lt;waf-ip&gt;:9443</code>。根据界面提示，使用 <strong>支持 TOTP 的认证软件</strong> 扫描二维码，然后输入动态口令登录。</p><h2 id="禁止系统响应任何从外部-内部来的-ping-请求"><a href="#禁止系统响应任何从外部-内部来的-ping-请求" class="headerlink" title="禁止系统响应任何从外部&#x2F;内部来的 ping 请求"></a>禁止系统响应任何从外部&#x2F;内部来的 ping 请求</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</span><br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://zhuanlan.zhihu.com/p/371611071">https://zhuanlan.zhihu.com/p/371611071</a></p><p><a href="https://www.logcg.com/archives/884.htmlrchives/884.html">https://www.logcg.com/archives/884.htmlrchives/884.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;入手-VPS-后要做的几件事&quot;&gt;&lt;a href=&quot;#入手-VPS-后要做的几件事&quot; class=&quot;headerlink&quot; title=&quot;入手 VPS 后要做的几件事&quot;&gt;&lt;/a&gt;入手 VPS 后要做的几件事&lt;/h1&gt;&lt;p&gt;前几天新购买了一台小鸡，在首次使用时进行了一</summary>
      
    
    
    
    
    <category term="配置" scheme="https://kydins.com/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>002-OpenWrt 中 GRE 掉线问题</title>
    <link href="https://kydins.com/posts/c9ff2d72.html"/>
    <id>https://kydins.com/posts/c9ff2d72.html</id>
    <published>2023-09-26T03:54:54.000Z</published>
    <updated>2024-03-24T04:21:06.217Z</updated>
    
    <content type="html"><![CDATA[<p>前几天使用 OpenWrt 测试 GRE 功能时发现，在 4G 网络和有线网之间切换会导致掉线，遂简单排查了一下问题所在。</p><h3 id="情景复现"><a href="#情景复现" class="headerlink" title="情景复现"></a>情景复现</h3><p><strong>本机</strong></p><p>系统：OpenWrt</p><p>有线网卡（wan）：eth1，IP：192.168.0.194，子网掩码：255.255.255.0，网关：192.168.0.1</p><p>有线网卡（lan）：br-lan，IP：192.168.3.1，子网掩码：255.255.255.0</p><p>无线网卡（wwan）：usb0，IP：10.221.139.224，子网掩码：255.255.255.0，网关：10.221.139.1</p><p>无线网卡使用中国移动 4G 卡上网</p><p><strong>GRE 对端</strong></p><p>系统：OpenWrt</p><p>有线网卡（wan）：eth1，IP：192.168.0.242，子网掩码：255.255.255.0，网关：192.168.0.1</p><p>有线网卡（lan）：br-lan，IP：192.168.2.218，子网掩码：255.255.255.0</p><p><img src="https://image.kydins.com/002-network_topology_diagram.png" alt="网络拓扑图"></p><p>本机 GRE 配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /etc/config/network<br><br>config interface &#x27;gresbksg&#x27;<br>        option disabled &#x27;0&#x27;<br>        option peeraddr &#x27;192.168.0.242&#x27; // 对端IP<br>        option proto &#x27;gre&#x27;<br>        option mtu &#x27;1280&#x27;<br>        option peerlocalip &#x27;192.168.2.0&#x27; // 对端<br>        option peerlocalmask &#x27;255.255.255.0&#x27;<br>        option zone &#x27;wan&#x27;<br><br>config interface &#x27;gresbksg_grestatic&#x27;<br>        option ifname &#x27;@gresbksg&#x27;<br>        option disabled &#x27;0&#x27;<br>        option ipaddr &#x27;192.168.5.1&#x27; // GRE隧道IP，对端为192.168.5.2<br>        option netmask &#x27;255.255.255.0&#x27;<br>        option proto &#x27;static&#x27;<br>        option zone &#x27;wan&#x27;<br></code></pre></td></tr></table></figure><p>GRE 正常建立，流量走 eth1，此时的路由表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@pg-2049671F7524:~# route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         192.168.0.1     0.0.0.0         UG    10     0        0 eth1<br>0.0.0.0         10.221.139.1    0.0.0.0         UG    12     0        0 usb0<br>10.221.139.0    0.0.0.0         255.255.255.0   U     12     0        0 usb0<br>192.168.0.0     0.0.0.0         255.255.255.0   U     10     0        0 eth1<br>192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br>192.168.3.0     0.0.0.0         255.255.255.0   U     0      0        0 br-lan<br>192.168.5.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br></code></pre></td></tr></table></figure><p>此时本机可以直接 ping 通对端的 lan 口，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@pg-2049671F7524:~# ping 192.168.2.218<br>PING 192.168.2.218 (192.168.2.218): 56 data bytes<br>64 bytes from 192.168.2.218: seq=0 ttl=64 time=1.481 ms<br>64 bytes from 192.168.2.218: seq=1 ttl=64 time=4.312 ms<br>64 bytes from 192.168.2.218: seq=2 ttl=64 time=2.344 ms<br>64 bytes from 192.168.2.218: seq=3 ttl=64 time=1.579 ms<br>64 bytes from 192.168.2.218: seq=4 ttl=64 time=3.409 ms<br>--- 192.168.2.218 ping statistics ---<br>5 packets transmitted, 5 packets received, 0% packet loss<br>round-trip min/avg/max = 1.481/2.625/4.312 ms<br></code></pre></td></tr></table></figure><p>路由追踪：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@pg-2049671F7524:~# traceroute 192.168.2.218<br>traceroute to 192.168.2.218 (192.168.2.218), 30 hops max, 38 byte packets<br> 1  192.168.2.218 (192.168.2.218)  1.173 ms  2.722 ms  2.603 ms<br><br></code></pre></td></tr></table></figure><p>拔掉 wan 口网线后，此时正常情况下应该无法 ping 通，因为 GRE 在内网中，路由表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@pg-2049671F7524:~# route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         10.77.102.1     0.0.0.0         UG    12     0        0 usb0<br>10.77.102.0     0.0.0.0         255.255.255.0   U     12     0        0 usb0<br>192.168.0.242   10.77.102.1     255.255.255.255 UGH   12     0        0 usb0<br>192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br>192.168.3.0     0.0.0.0         255.255.255.0   U     0      0        0 br-lan<br>192.168.5.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br></code></pre></td></tr></table></figure><p>将网线接回去后，还是无法 ping 通，此时的路由表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@pg-2049671F7524:~# route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         192.168.0.1     0.0.0.0         UG    10     0        0 eth1<br>0.0.0.0         10.77.102.1     0.0.0.0         UG    12     0        0 usb0<br>10.77.102.0     0.0.0.0         255.255.255.0   U     12     0        0 usb0<br>192.168.0.0     0.0.0.0         255.255.255.0   U     10     0        0 eth1<br>192.168.0.242   10.77.102.1     255.255.255.255 UGH   12     0        0 usb0<br>192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br>192.168.3.0     0.0.0.0         255.255.255.0   U     0      0        0 br-lan<br>192.168.5.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br></code></pre></td></tr></table></figure><p>可以发现，我们在拔掉网线后，路由表内自动添加了一条 host 路由</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">192.168.0.242   10.77.102.1     255.255.255.255 UGH   12     0        0 usb0<br></code></pre></td></tr></table></figure><p>但是由于我们的 GRE 对端是建立在内网中的，4G 网络肯定是无法访问的，所有这条 host 路由是错误的。</p><p>当我们将网线接回后，由于已经存在了一条 host 路由，所有访问 192.168.0.242 的流量会从 usb0 出去，导致 GRE 隧道无法建立。</p><h3 id="怎么使系统正确添加-host-路由？"><a href="#怎么使系统正确添加-host-路由？" class="headerlink" title="怎么使系统正确添加 host 路由？"></a>怎么使系统正确添加 host 路由？</h3><h4 id="思路一：关闭自动添加-host-路由"><a href="#思路一：关闭自动添加-host-路由" class="headerlink" title="思路一：关闭自动添加 host 路由"></a>思路一：关闭自动添加 host 路由</h4><p>查看 OpenWrt 源码中的 gre 脚本（openwrt&#x2F;package&#x2F;network&#x2F;config&#x2F;gre&#x2F;files&#x2F;gre.sh）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-function"><span class="hljs-title">gre_setup</span></span>() &#123;<br><span class="hljs-built_in">local</span> cfg=<span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span><br><span class="hljs-built_in">local</span> mode=<span class="hljs-string">&quot;<span class="hljs-variable">$2</span>&quot;</span><br><span class="hljs-built_in">local</span> remoteip<br><br><span class="hljs-built_in">local</span> ipaddr peeraddr peerlocalip peerlocalmask<br>json_get_vars <span class="hljs-built_in">df</span> ipaddr peeraddr tunlink nohostroute peerlocalip peerlocalmask<br><br>[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$peeraddr</span>&quot;</span> ] &amp;&amp; &#123;<br>proto_notify_error <span class="hljs-string">&quot;<span class="hljs-variable">$cfg</span>&quot;</span> <span class="hljs-string">&quot;MISSING_PEER_ADDRESS&quot;</span><br>proto_block_restart <span class="hljs-string">&quot;<span class="hljs-variable">$cfg</span>&quot;</span><br><span class="hljs-built_in">exit</span><br>&#125;<br><br>remoteip=$(resolveip -t 10 -4 <span class="hljs-string">&quot;<span class="hljs-variable">$peeraddr</span>&quot;</span>)<br><br><span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$remoteip</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>proto_notify_error <span class="hljs-string">&quot;<span class="hljs-variable">$cfg</span>&quot;</span> <span class="hljs-string">&quot;PEER_RESOLVE_FAIL&quot;</span><br><span class="hljs-built_in">exit</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">for</span> ip <span class="hljs-keyword">in</span> <span class="hljs-variable">$remoteip</span>; <span class="hljs-keyword">do</span><br>peeraddr=<span class="hljs-variable">$ip</span><br><span class="hljs-built_in">break</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;nohostroute&#125;</span>&quot;</span> != <span class="hljs-string">&quot;1&quot;</span> ]; <span class="hljs-keyword">then</span><br>( proto_add_host_dependency <span class="hljs-string">&quot;<span class="hljs-variable">$cfg</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$peeraddr</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$tunlink</span>&quot;</span> )<br><span class="hljs-keyword">fi</span><br><br>[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$ipaddr</span>&quot;</span> ] &amp;&amp; &#123;<br><span class="hljs-built_in">local</span> wanif=<span class="hljs-string">&quot;<span class="hljs-variable">$tunlink</span>&quot;</span><br><span class="hljs-keyword">if</span> [ -z <span class="hljs-variable">$wanif</span> ] &amp;&amp; ! network_find_wan wanif; <span class="hljs-keyword">then</span><br>proto_notify_error <span class="hljs-string">&quot;<span class="hljs-variable">$cfg</span>&quot;</span> <span class="hljs-string">&quot;NO_WAN_LINK&quot;</span><br><span class="hljs-built_in">exit</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> ! network_get_ipaddr ipaddr <span class="hljs-string">&quot;<span class="hljs-variable">$wanif</span>&quot;</span>; <span class="hljs-keyword">then</span><br>proto_notify_error <span class="hljs-string">&quot;<span class="hljs-variable">$cfg</span>&quot;</span> <span class="hljs-string">&quot;NO_WAN_LINK&quot;</span><br><span class="hljs-built_in">exit</span><br><span class="hljs-keyword">fi</span><br>&#125;<br><br>[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$df</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">df</span>=<span class="hljs-string">&quot;1&quot;</span><br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$mode</span>&quot;</span> <span class="hljs-keyword">in</span><br>gretapip)<br>gre_generic_setup <span class="hljs-variable">$cfg</span> <span class="hljs-variable">$mode</span> <span class="hljs-variable">$ipaddr</span> <span class="hljs-variable">$peeraddr</span> <span class="hljs-string">&quot;gre4t-<span class="hljs-variable">$cfg</span>&quot;</span><br>route add -net <span class="hljs-string">&quot;<span class="hljs-variable">$peerlocalip</span>&quot;</span> netmask <span class="hljs-string">&quot;<span class="hljs-variable">$peerlocalmask</span>&quot;</span> dev <span class="hljs-string">&quot;gre4t-<span class="hljs-variable">$cfg</span>&quot;</span><br>;;<br>*)<br>gre_generic_setup <span class="hljs-variable">$cfg</span> <span class="hljs-variable">$mode</span> <span class="hljs-variable">$ipaddr</span> <span class="hljs-variable">$peeraddr</span> <span class="hljs-string">&quot;gre4-<span class="hljs-variable">$cfg</span>&quot;</span><br>route add -net <span class="hljs-string">&quot;<span class="hljs-variable">$peerlocalip</span>&quot;</span> netmask <span class="hljs-string">&quot;<span class="hljs-variable">$peerlocalmask</span>&quot;</span> dev <span class="hljs-string">&quot;gre4-<span class="hljs-variable">$cfg</span>&quot;</span><br>;;<br><span class="hljs-keyword">esac</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，只有在 nohostroute 为非 1 时，才会添加 host 路由</p><blockquote><p>以下是 ChatGPT 的回答：</p></blockquote><p><code>proto_add_host_dependency</code>是 OpenWrt 中的一个函数，它用于向当前接口的依赖列表中添加一个 host 依赖项。</p><p>在 OpenWrt 中，每个接口都有一个依赖列表，用于记录这个接口所依赖的其他接口或主机。当这个接口启动时，系统会检查它的依赖列表，如果依赖项中有任何一个接口或主机不可达，这个接口就无法启动。这种机制可以保证网络的连通性和稳定性。</p><p><code>proto_add_host_dependency</code>函数用于向当前接口的依赖列表中添加一个 host 依赖项。它接受三个参数：当前接口的配置名称、依赖主机的 IP 地址、依赖主机所在的网络接口名称。例如，以下命令将当前接口<code>eth0</code>添加一个 host 依赖项，依赖主机的 IP 地址是<code>192.168.1.1</code>，所在的网络接口名称是<code>eth1</code>：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proto_add_host_dependency</span> <span class="hljs-string">&quot;eth0&quot;</span> <span class="hljs-string">&quot;192.168.1.1&quot;</span> <span class="hljs-string">&quot;eth1&quot;</span><br></code></pre></td></tr></table></figure><p>在 GRE 隧道的配置中，<code>proto_add_host_dependency</code>函数通常用于将对端 IP 地址添加到当前隧道的依赖列表中。这样，当对端不可达时，当前隧道就无法启动，从而避免了无效的隧道连接。</p><p>在你的问题中，<code>proto_add_host_dependency</code>函数用于向当前 GRE 隧道的依赖列表中添加对端 IP 地址的 host 依赖项。如果<code>nohostroute</code>字段没有设置为<code>1</code>，系统会自动添加这个 host 路由，使得对端 IP 地址可达。如果<code>nohostroute</code>字段设置为<code>1</code>，则需要手动使用<code>proto_add_host_dependency</code>函数将对端 IP 地址添加到依赖列表中，否则 GRE 隧道无法启动。</p><p>OpenWrt 官方是这样<a href="https://openwrt.org/docs/guide-user/network/tunneling_interface_protocols">解释</a>这个参数的：</p><table><thead><tr><th>Name</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>nohostroute</td><td>boolean</td><td>no</td><td>0</td><td>Do not add routes to ensure the tunnel endpoints are routed via non-tunnel device</td></tr></tbody></table><p>于是我尝试了更改 GRE 的配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">config interface &#x27;gresbksg&#x27;<br>        option disabled &#x27;0&#x27;<br>        option peeraddr &#x27;192.168.0.242&#x27;<br>        option proto &#x27;gre&#x27;<br>        option mtu &#x27;1280&#x27;<br>        option peerlocalip &#x27;192.168.2.0&#x27;<br>        option peerlocalmask &#x27;255.255.255.0&#x27;<br>        option zone &#x27;wan&#x27;<br>        option nohostroute &#x27;1&#x27;<br><br>config interface &#x27;gresbksg_grestatic&#x27;<br>        option ifname &#x27;@gresbksg&#x27;<br>        option disabled &#x27;0&#x27;<br>        option ipaddr &#x27;192.168.5.1&#x27;<br>        option netmask &#x27;255.255.255.0&#x27;<br>        option proto &#x27;static&#x27;<br>        option zone &#x27;wan&#x27;<br></code></pre></td></tr></table></figure><p>修改完成后重启 network，发现是可以正常使用的。此时的路由表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@pg-2049671F7524:~# route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         192.168.0.1     0.0.0.0         UG    10     0        0 eth1<br>0.0.0.0         10.162.134.1    0.0.0.0         UG    12     0        0 usb0<br>10.162.134.0    0.0.0.0         255.255.255.0   U     12     0        0 usb0<br>192.168.0.0     0.0.0.0         255.255.255.0   U     10     0        0 eth1<br>192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br>192.168.3.0     0.0.0.0         255.255.255.0   U     0      0        0 br-lan<br>192.168.5.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br></code></pre></td></tr></table></figure><p>将网线拔掉后，路由表已经不会自动添加 host 路由了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@pg-2049671F7524:~# route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         10.162.134.1    0.0.0.0         UG    12     0        0 usb0<br>10.162.134.0    0.0.0.0         255.255.255.0   U     12     0        0 usb0<br>192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br>192.168.3.0     0.0.0.0         255.255.255.0   U     0      0        0 br-lan<br>192.168.5.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br></code></pre></td></tr></table></figure><p>然后再接回网线，查看路由表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@pg-2049671F7524:~# route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         192.168.0.1     0.0.0.0         UG    10     0        0 eth1<br>0.0.0.0         10.162.134.1    0.0.0.0         UG    12     0        0 usb0<br>10.162.134.0    0.0.0.0         255.255.255.0   U     12     0        0 usb0<br>192.168.0.0     0.0.0.0         255.255.255.0   U     10     0        0 eth1<br>192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br>192.168.3.0     0.0.0.0         255.255.255.0   U     0      0        0 br-lan<br>192.168.5.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br></code></pre></td></tr></table></figure><p>可以发现因为没有错误的 host 路由，我们的 GRE 隧道又能正常建立连接了。尝试 ping 一下对端的 LAN 口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@pg-2049671F7524:~# ping 192.168.2.218<br>PING 192.168.2.218 (192.168.2.218): 56 data bytes<br>64 bytes from 192.168.2.218: seq=0 ttl=64 time=1.810 ms<br>64 bytes from 192.168.2.218: seq=1 ttl=64 time=3.701 ms<br>64 bytes from 192.168.2.218: seq=2 ttl=64 time=6.526 ms<br>64 bytes from 192.168.2.218: seq=3 ttl=64 time=4.254 ms<br>--- 192.168.2.218 ping statistics ---<br>4 packets transmitted, 4 packets received, 0% packet loss<br>round-trip min/avg/max = 1.810/4.072/6.526 ms<br></code></pre></td></tr></table></figure><p><strong>疑惑：为什么用有线时，不会添加 host 路由？</strong></p><h4 id="思路二：将-GRE-隧道绑定到某个接口上-未成功"><a href="#思路二：将-GRE-隧道绑定到某个接口上-未成功" class="headerlink" title="思路二：将 GRE 隧道绑定到某个接口上 (未成功)"></a>思路二：将 GRE 隧道绑定到某个接口上 (未成功)</h4><p><del>可以使用参数<code>tunlink</code></del></p><table><thead><tr><th>Name</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>tunlink</td><td>string</td><td>no</td><td>(none)</td><td>Bind the tunnel to the specified interface, OpenWrt 21.02+</td></tr></tbody></table><p><del>修改 network 中 gre 的配置，将 GRE 隧道绑定到本地网络接口 eth1 上：</del><br>口 eth1 上：~~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前几天使用 OpenWrt 测试 GRE 功能时发现，在 4G 网络和有线网之间切换会导致掉线，遂简单排查了一下问题所在。&lt;/p&gt;
&lt;h3 id=&quot;情景复现&quot;&gt;&lt;a href=&quot;#情景复现&quot; class=&quot;headerlink&quot; title=&quot;情景复现&quot;&gt;&lt;/a&gt;情景复现&lt;</summary>
      
    
    
    
    
    <category term="OpenWrt" scheme="https://kydins.com/tags/OpenWrt/"/>
    
  </entry>
  
  <entry>
    <title>001-C 语言中将 char=1 会发生什么？</title>
    <link href="https://kydins.com/posts/c078bc77.html"/>
    <id>https://kydins.com/posts/c078bc77.html</id>
    <published>2023-09-10T03:54:54.000Z</published>
    <updated>2024-03-23T14:47:11.021Z</updated>
    
    <content type="html"><![CDATA[<hr>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
</summary>
      
    
    
    
    
    <category term="C" scheme="https://kydins.com/tags/C/"/>
    
  </entry>
  
</feed>
