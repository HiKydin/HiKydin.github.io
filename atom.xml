<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kydin&#39;s Blog</title>
  
  
  <link href="https://kydins.com/atom.xml" rel="self"/>
  
  <link href="https://kydins.com/"/>
  <updated>2024-01-09T14:18:23.652Z</updated>
  <id>https://kydins.com/</id>
  
  <author>
    <name>Kydin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>006-在 OpenWrt 中使用 mwan3 设置链路切换</title>
    <link href="https://kydins.com/006-zai-openwrt-zhong-shi-yong-mwan3-she-zhi-lian-lu-qie-huan.html"/>
    <id>https://kydins.com/006-zai-openwrt-zhong-shi-yong-mwan3-she-zhi-lian-lu-qie-huan.html</id>
    <published>2024-01-09T14:16:04.000Z</published>
    <updated>2024-01-09T14:18:23.652Z</updated>
    
    <content type="html"><![CDATA[<p>笔者在使用 mwan3 的过程中遇到了一个非常低级的问题，深感自己的网络基础知识还是不够扎实，特此记录。</p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在 OpenWrt 系统中使用 mwan3 软件进行链路管理，设备连接 Wi-Fi 和 USB 模块进行拨号上网。</p><p>需设置移动网络的优先级为高，Wi-Fi 的优先级低，若此时移动网络断开连接，应无缝切换到 Wi-Fi。</p><p>测试指标为 ping 外网的过程中不应断开。</p><p>实际测试中发现，断开移动网络，无法实现无缝切换，且 Wi-Fi 接口已经连接的情况下，无法手动 ping 通外网。</p><p><img src="http://image.kydins.com/006-network_topology_diagram.png" alt="网络拓扑图"></p><h1 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h1><p>首先看一下我的配置文件吧：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@openwrt:~# cat /etc/config/mwan3 <br><br>config globals &#x27;globals&#x27;<br>        option mmx_mask &#x27;0x3F00&#x27;<br>        option rtmon_interval &#x27;5&#x27;<br><br>config interface &#x27;wan&#x27;<br>        option enabled &#x27;0&#x27;<br>        option family &#x27;ipv4&#x27;<br>        option reliability &#x27;1&#x27;<br>        option count &#x27;1&#x27;<br>        option timeout &#x27;4&#x27;<br>        option interval &#x27;10&#x27;<br>        option down &#x27;3&#x27;<br>        option up &#x27;2&#x27;<br>        option seamless &#x27;1&#x27;<br>        list track_ip &#x27;8.8.8.8&#x27;<br>        list flush_conntrack &#x27;ifup&#x27;<br>        list flush_conntrack &#x27;ifdown&#x27;<br><br>config interface &#x27;wwan&#x27;<br>        option family &#x27;ipv4&#x27;<br>        option reliability &#x27;1&#x27;<br>        option count &#x27;1&#x27;<br>        option timeout &#x27;4&#x27;<br>        option interval &#x27;10&#x27;<br>        option down &#x27;3&#x27;<br>        option up &#x27;2&#x27;<br>        option seamless &#x27;1&#x27;<br>        option enabled &#x27;1&#x27;<br>        option add_track_route &#x27;0&#x27;<br>        list track_ip &#x27;8.8.8.8&#x27;<br>        list flush_conntrack &#x27;ifup&#x27;<br>        list flush_conntrack &#x27;ifdown&#x27;<br><br>config interface &#x27;wwlan&#x27;<br>        option family &#x27;ipv4&#x27;<br>        option reliability &#x27;1&#x27;<br>        option count &#x27;1&#x27;<br>        option timeout &#x27;4&#x27;<br>        option interval &#x27;10&#x27;<br>        option down &#x27;3&#x27;<br>        option up &#x27;2&#x27;<br>        option seamless &#x27;1&#x27;<br>        option enabled &#x27;1&#x27;<br>        list track_ip &#x27;8.8.8.8&#x27;<br>        option add_track_route &#x27;0&#x27;<br>        list flush_conntrack &#x27;ifup&#x27;<br>        list flush_conntrack &#x27;ifdown&#x27;<br><br>config member &#x27;wan_mw&#x27;<br>        option interface &#x27;wan&#x27;<br>        option metric &#x27;1&#x27;<br>        option weight &#x27;3&#x27;<br><br>config member &#x27;wwan_mw&#x27;<br>        option interface &#x27;wwan&#x27;<br>        option metric &#x27;2&#x27;<br>        option weight &#x27;3&#x27;<br><br>config member &#x27;wwlan_mw&#x27;<br>        option interface &#x27;wwlan&#x27;<br>        option metric &#x27;3&#x27;<br>        option weight &#x27;3&#x27;<br><br>config policy &#x27;default&#x27;<br>        option last_resort &#x27;default&#x27;<br>        list use_member &#x27;wan_mw&#x27;<br>        list use_member &#x27;wwan_mw&#x27;<br>        list use_member &#x27;wwlan_mw&#x27;<br><br>config rule &#x27;https&#x27;<br>        option sticky &#x27;1&#x27;<br>        option dest_port &#x27;443&#x27;<br>        option proto &#x27;tcp&#x27;<br>        option use_policy &#x27;default&#x27;<br><br>config rule &#x27;default_rule&#x27;<br>        option dest_ip &#x27;0.0.0.0/0&#x27;<br>        option use_policy &#x27;default&#x27;<br></code></pre></td></tr></table></figure><p>我配置了优先走移动网络，移动网络断口后无缝切换为 Wi-Fi，但发现断开移动网络后，网络直接就断开了。</p><p>此时查看路由表发现，没有默认路由：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@openwrt:~# route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>192.168.0.0     0.0.0.0         255.255.255.0   U     11     0        0 wlan0<br>192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 br-lan<br></code></pre></td></tr></table></figure><p>这就奇怪了，且禁用移动网络，重启 Wi-Fi 试试看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@openwrt:~# ifup wwlan<br>root@openwrt:~# route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         192.168.0.1     0.0.0.0         UG    11     0        0 wlan0<br>192.168.0.0     0.0.0.0         255.255.255.0   U     11     0        0 wlan0<br>192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 br-lan<br></code></pre></td></tr></table></figure><p>是有默认路由的，那开启移动网络，再次查看路由表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@openwrt:~# route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         10.137.155.2    0.0.0.0         UG    11     0        0 usb0<br>10.137.155.2    0.0.0.0         255.255.255.254 U     11     0        0 usb0<br>192.168.0.0     0.0.0.0         255.255.255.0   U     11     0        0 wlan0<br>192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 br-lan<br></code></pre></td></tr></table></figure><p>发现居然 Wi-Fi 的默认路由没了？？？</p><p>原来是移动网络和 Wi-Fi 的跃点相同了，都是 11，导致只会存在 1 个默认路由。</p><h1 id="什么是跃点？"><a href="#什么是跃点？" class="headerlink" title="什么是跃点？"></a>什么是跃点？</h1><p>引用自百度百科：</p><blockquote><p>跃点：即路由。一个路由为一个跃点。<a href="https://baike.baidu.com/item/%E4%BC%A0%E8%BE%93%E8%BF%87%E7%A8%8B/22722988?fromModule=lemma_inlink">传输过程</a>中需要经过多个网络，每个被经过的<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87/7667828?fromModule=lemma_inlink">网络设备</a>点（有能力路由的）叫做一个跃点，地址就是它的 ip。跃点数是经过了多少个跃点的<a href="https://baike.baidu.com/item/%E7%B4%AF%E5%8A%A0%E5%99%A8/8590163?fromModule=lemma_inlink">累加器</a>，为了防止无用的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%8C%85/489739?fromModule=lemma_inlink">数据包</a>在网上流散。为路由指定所需跃点数的整数值（范围是 1 ~ 9999），它用来在<a href="https://baike.baidu.com/item/%E8%B7%AF%E7%94%B1%E8%A1%A8/2707408?fromModule=lemma_inlink">路由表</a>里的多个路由中选择与转发包中的目标地址最为匹配的路由。所选的路由具有最少的跃点数。跃点数能够反映跃点的数量、路径的速度、路径可靠性、路径<a href="https://baike.baidu.com/item/%E5%90%9E%E5%90%90%E9%87%8F/157092?fromModule=lemma_inlink">吞吐量</a>以及管理属性。</p></blockquote><p>按笔者自己的理解，可以约等于权重，跃点越大权重越低，优先走跃点小的。</p><p>因此，将移动网络的网关跃点修改为 10，Wi-Fi 接口的网关跃点保持 11 不变。</p><p>查看路由表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@openwrt:~# route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         10.108.180.39   0.0.0.0         UG    10     0        0 usb0<br>0.0.0.0         192.168.0.1     0.0.0.0         UG    11     0        0 wlan0<br>10.108.180.38   0.0.0.0         255.255.255.254 U     10     0        0 usb0<br>192.168.0.0     0.0.0.0         255.255.255.0   U     11     0        0 wlan0<br>192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 br-lan<br></code></pre></td></tr></table></figure><p>可以看到，现在已经正常有两个默认路由了，并且移动网络的默认路由是在 Wi-Fi 上面的。这也符合我 mwan3 配置的需求：先走移动网络，没有移动网络后走 Wi-Fi。</p><p>此时在后台 ping 外网，然后断开移动网络，可以看到 ping 是不会断的，自动走 Wi-Fi 出去了。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://baike.baidu.com/item/%E8%B7%83%E7%82%B9%E6%95%B0/4941127">百度百科 - 跃点数</a></p><p><a href="https://openwrt.org/docs/guide-user/network/wan/multiwan/mwan3">OpenWrt-mwan3</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;笔者在使用 mwan3 的过程中遇到了一个非常低级的问题，深感自己的网络基础知识还是不够扎实，特此记录。&lt;/p&gt;
&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;在 </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>005-PT入坑指北</title>
    <link href="https://kydins.com/005-pt-ru-keng-zhi-bei.html"/>
    <id>https://kydins.com/005-pt-ru-keng-zhi-bei.html</id>
    <published>2023-12-29T13:57:43.000Z</published>
    <updated>2023-12-29T14:28:44.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PT-入坑指北"><a href="#PT-入坑指北" class="headerlink" title="PT 入坑指北"></a>PT 入坑指北</h1><h2 id="一、什么是-PT？"><a href="#一、什么是-PT？" class="headerlink" title="一、什么是 PT？"></a>一、什么是 PT？</h2><p>PT（Private Tracker）是一种改良自 BitTorrent 协议的 P2P 下载方式。<code>Private Tracker</code>指私有种子服务器，与 BT 最大的不同点分别为可进行私密范围下载，及可统计每个用户的上载及下载量。</p><h2 id="二、PT-怎么玩？"><a href="#二、PT-怎么玩？" class="headerlink" title="二、PT 怎么玩？"></a>二、PT 怎么玩？</h2><p><strong>PT 站是在私密范围内下载</strong></p><ul><li>只允许本站用户下载，不允许用户将种子公开上传</li><li>PT 站需要内部邀请或者捐赠的形式获得邀请码</li></ul><p>统计上传量和下载量</p><ul><li>网站会统计每一个用户的下载量和上传量，下载量和上传量在一定程度上决定着用户的等级，有没有权限下载文件</li><li>每一个用户注册后会得到一个 passkey，用户从网站里面下载的种子里面包含了私人的 passkey</li><li>通过 passkey 识别每一个用户，统计每一个用户的下载、上传和做种时间</li><li>PT站是「人人为我，我为人人」的资源共享 Team</li></ul><p>新手的话可以先从一些小站开始玩起，将自己的数据养好之后再去各类论坛找大佬求邀请码。</p><h2 id="三、对于新手应该需要知道的"><a href="#三、对于新手应该需要知道的" class="headerlink" title="三、对于新手应该需要知道的"></a>三、对于新手应该需要知道的</h2><p>1、<strong>魔力值</strong>：相当于货币，一般可以通过坚持每日签到&#x2F;做种获得。可以在站内购买上传量&#x2F;下载量&#x2F;邀请名额。</p><ul><li><p>1个魔力值 * <em>你的做种数</em> (做种数最多计7个)</p></li><li><p>每小时获得的魔力值点数由下面的公式给出： </p><p>式中简言之：为做种人数少、文件体积大的种子做种能获得更多魔力值。</p><p><img src="https://image.kydins.com/005-formula.png" alt="formula"></p><ul><li>**A **为中间变量</li><li><strong>Ti</strong> 为第 **i **个种子的生存时间, 即自种子发布起到现在所经过的时间, 单位是周</li><li><strong>T0 <strong>为参数。</strong>T0</strong> &#x3D; 8</li><li>**Si **为第 <strong>i</strong> 个种子的大小，单位是GB</li><li><strong>Ni</strong> 为第 <strong>i</strong> 个种子当前的做种者数</li><li><strong>N0 <strong>为参数。</strong>N0</strong> &#x3D; 7</li><li><strong>Wi</strong> 为第 <strong>i</strong> 个种子的权重系数，默认为 1，零魔种子为 0.2</li></ul><p>做种每小时将得到如下的魔力值</p><ul><li>**B **为1小时中用户获得的做种魔力值点数</li><li><strong>B0</strong> 为参数，代表用户1小时获得魔力值的上限。<strong>B0</strong> &#x3D; 100</li><li><strong>L <strong>为参数。</strong>L</strong> &#x3D; 300</li></ul><p><img src="https://image.kydins.com/005-formula2.png" alt="formula2"></p></li></ul><p>2、<strong>上传量</strong>：就是你做种上传了多少 G 的资源</p><p>3、<strong>下载量</strong>：你从pt站下载了多少 G 的资源</p><p>4、<strong>分享率</strong>：上传量&#x2F;下载量，区分你的整体分享率和独立分享率是很重要的。整体分享率关注的是自从你加入站点以来，账号的整体上传与下载量。而独立分享率则针对每一个你正在下载或做种的文件。</p><p>5、你应该保持一个<strong>良好的分享率</strong>，防止被当作吸血鬼 t 掉，所以你需要了解什么是 <code>[Free] [2x免费] [50%免费]</code></p><p>[Free]：这个资源下载是免费的(不计入下载量)，1倍上传量。</p><p>[2x免费]：这个资源下载是免费的(不计入下载量)，2倍上传量。</p><p>[50%免费]：这个资源0.5倍下载量，1倍上传量。</p><p>新手度过考核期可以一定不要放过这类资源，前期可以快速将上传量刷上去。</p><h2 id="四、软件的选择"><a href="#四、软件的选择" class="headerlink" title="四、软件的选择"></a>四、软件的选择</h2><p>一般来说每个 pt 站对于允许使用的软件都是有要求的，这里需要大家根据情况选择。</p><p>我一般会使用开源软件 <a href="https://transmissionbt.com/">Transmission</a>，注意，<strong>请不要使用迅雷！</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PT-入坑指北&quot;&gt;&lt;a href=&quot;#PT-入坑指北&quot; class=&quot;headerlink&quot; title=&quot;PT 入坑指北&quot;&gt;&lt;/a&gt;PT 入坑指北&lt;/h1&gt;&lt;h2 id=&quot;一、什么是-PT？&quot;&gt;&lt;a href=&quot;#一、什么是-PT？&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>004-ModBus报文解析实战</title>
    <link href="https://kydins.com/004-modbus-bao-wen-jie-xi-shi-zhan.html"/>
    <id>https://kydins.com/004-modbus-bao-wen-jie-xi-shi-zhan.html</id>
    <published>2023-10-08T13:07:07.000Z</published>
    <updated>2023-10-20T12:39:54.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ModBus-报文解析实战"><a href="#ModBus-报文解析实战" class="headerlink" title="ModBus 报文解析实战"></a>ModBus 报文解析实战</h1><p>事情是这样的，项目需要一个串口采集1032协议电压的功能。在实现中还是遇到不少问题，由于是第一次使用，遂做下一些记录。</p><p><img src="https://image.kydins.com/004-modbusslave-hex.png" alt="ModBus模拟量Hex"></p><p><img src="https://image.kydins.com/004-modbusslave-float.png" alt="ModBus模拟量Float"></p><h2 id="报文内容"><a href="#报文内容" class="headerlink" title="报文内容"></a>报文内容</h2><p>使用串口发送 ModBus 报文时，需要解析收到的报文</p><blockquote><p>01 03 04 00 00 41 40 CB 93</p></blockquote><p>这是请求报文：</p><ul><li>01：设备地址，表示要访问的 Modbus 设备的地址为1。</li><li>03：功能码，表示要读取保持寄存器。</li><li>00 00：起始地址，表示要读取的保持寄存器的起始地址为0。</li><li>00 02：寄存器数量，表示要读取的保持寄存器数量为2。</li><li>C4 0B：CRC 校验码，用于验证报文的正确性。</li></ul><p>返回报文：</p><ul><li>01：设备地址，表示返回的报文是来自地址为1的 Modbus 设备。</li><li>03：功能码，表示返回的报文是读取保持寄存器的响应报文。</li><li>04：字节数，表示返回的数据字节数为4。</li><li>00 00：寄存器值，表示起始地址为0的第一个保持寄存器的值。</li><li>41 40：寄存器值，表示起始地址为1的第二个保持寄存器的值。</li><li>CB 93：CRC校验码，用于验证报文的正确性。</li></ul><h2 id="解析返回报文"><a href="#解析返回报文" class="headerlink" title="解析返回报文"></a>解析返回报文</h2><p>由于我只需要采集单路 ModBus 所以我的请求报文是固定的。因此我的返回报文的头部内容也是固定的。</p><p>所以我们需要解析的数据就是</p><blockquote><p>00 00 41 40</p><p>注意：这是IEEE 754浮点数</p></blockquote><p>这就是我们需要的电压数据。其实很简单，只需要做一个十六进制转float就可以。</p><p><img src="http://image.kydins.com/004-float-to-hex.jpg" alt="12转hex"></p><p>细心的朋友可能发现了，我是使用41400000转换的，这是为什么呢？</p><p>这是因为我的float格式为CDAB（这是等到最后才发现的）</p><h2 id="C-语言代码实现"><a href="#C-语言代码实现" class="headerlink" title="C 语言代码实现"></a>C 语言代码实现</h2><h3 id="使用共用体进行类型转换"><a href="#使用共用体进行类型转换" class="headerlink" title="使用共用体进行类型转换"></a>使用共用体进行类型转换</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-type">uint8_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> <span class="hljs-type">uint16_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-type">uint32_t</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> &#123;<br>  <span class="hljs-type">uint8_t</span> rsp[] = &#123;<span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x40</span>&#125;;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先要明确的是，直接使用强制类型转换是不行的。直接看代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-type">uint8_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> <span class="hljs-type">uint16_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-type">uint32_t</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>  <span class="hljs-type">uint32_t</span> u32;<br>  <span class="hljs-type">float</span> f;<br>&#125; <span class="hljs-type">float_union_t</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">float</span> <span class="hljs-title function_">utils_get_float_at</span><span class="hljs-params">(<span class="hljs-type">void</span> *data, <span class="hljs-type">int</span> pos)</span> &#123;<br>  <span class="hljs-type">uint8_t</span> __attribute__((aligned(<span class="hljs-number">4</span>))) tmp[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-built_in">memcpy</span>(tmp, (<span class="hljs-type">uint8_t</span> *)data, <span class="hljs-number">4</span>);<br>  <span class="hljs-type">uint32_t</span> lw = *((<span class="hljs-type">uint32_t</span> *)(((<span class="hljs-type">uint8_t</span> *)(tmp)) + pos));<br>  <span class="hljs-type">float_union_t</span> fu = &#123;.u32 = lw&#125;;<br>  <span class="hljs-keyword">return</span> fu.f;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span> &#123;<br>  <span class="hljs-type">uint8_t</span> rsp[] = &#123;<span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x40</span>&#125;;<br>  <span class="hljs-type">float</span> value = utils_get_float_at(rsp, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;value = %f\n&quot;</span>, value);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">pureos@pureos:~$ gcc 1.c -o 1<br>pureos@pureos:~$ ./1<br>value = 3.015625<br></code></pre></td></tr></table></figure><p>可以看到我们按照正常的字节序转换出来的浮点数是错误的，将这个值转换为十六进制为：</p><blockquote><p>40 41 00 00</p></blockquote><p><img src="http://image.kydins.com/004-hex-to-float.png" alt="转Hex"></p><h3 id="寻找正确的12-000000"><a href="#寻找正确的12-000000" class="headerlink" title="寻找正确的12.000000"></a>寻找正确的12.000000</h3><p>所以正确的<code>12.000000</code> 应该是多少呢？</p><p>使用以下函数查看一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-type">uint8_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> <span class="hljs-type">uint16_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-type">uint32_t</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>  <span class="hljs-type">uint32_t</span> u32;<br>  <span class="hljs-type">float</span> f;<br>&#125; <span class="hljs-type">float_union_t</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">float</span> <span class="hljs-title function_">utils_get_float_at</span><span class="hljs-params">(<span class="hljs-type">void</span> *data, <span class="hljs-type">int</span> pos)</span> &#123;<br>  <span class="hljs-type">uint8_t</span> __attribute__((aligned(<span class="hljs-number">4</span>))) tmp[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-built_in">memcpy</span>(tmp, (<span class="hljs-type">uint8_t</span> *)data, <span class="hljs-number">4</span>);<br>  <span class="hljs-type">uint32_t</span> lw = *((<span class="hljs-type">uint32_t</span> *)(((<span class="hljs-type">uint8_t</span> *)(tmp)) + pos));<br>  <span class="hljs-type">float_union_t</span> fu = &#123;.u32 = lw&#125;;<br>  <span class="hljs-keyword">return</span> fu.f;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">utils_set_float_at</span><span class="hljs-params">(<span class="hljs-type">void</span> *data, <span class="hljs-type">int</span> pos, <span class="hljs-type">float</span> value)</span> &#123;<br>  *((<span class="hljs-type">uint32_t</span> *)((<span class="hljs-type">uint8_t</span> *)(data) + pos)) = *(<span class="hljs-type">uint32_t</span> *)(&amp;value);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span> &#123;<br>  <span class="hljs-type">uint8_t</span> rsp[] = &#123;<span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x40</span>&#125;;<br>  <span class="hljs-type">float</span> value = utils_get_float_at(rsp, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;value = %f\n&quot;</span>, value);<br><br>  <span class="hljs-type">uint8_t</span> float_to_hex_buf[<span class="hljs-number">4</span>];<br>  <span class="hljs-type">float</span> float_num = <span class="hljs-number">12.000000</span>;<br>  bzero(float_to_hex_buf, <span class="hljs-keyword">sizeof</span>(float_to_hex_buf));<br>  utils_set_float_at(float_to_hex_buf, <span class="hljs-number">0</span>, float_num);<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;float %f to hex = &quot;</span>, float_num);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.02hx &quot;</span>, float_to_hex_buf[i]);<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">pureos@pureos:~$ gcc 1.c -o 1<br>pureos@pureos:~$ ./1<br>value = 3.015625<br>float 12.000000 to hex = 00 00 40 41 <br></code></pre></td></tr></table></figure><p>现在已经非常清晰了，在我当前的环境中，需要将每位寄存器上的数据位互换位置。也就是两两之间互换。</p><p>原始数据：00 00 41 40</p><p>正确数据：00 00 40 41</p><p>然后将uint8的数据转为uint16，这个时候就可以获取正确的数据了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-type">uint8_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> <span class="hljs-type">uint16_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-type">uint32_t</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>  <span class="hljs-type">uint32_t</span> u32;<br>  <span class="hljs-type">float</span> f;<br>&#125; <span class="hljs-type">float_union_t</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">float</span> <span class="hljs-title function_">utils_get_float_at</span><span class="hljs-params">(<span class="hljs-type">void</span> *data, <span class="hljs-type">int</span> pos)</span> &#123;<br>  <span class="hljs-type">uint8_t</span> __attribute__((aligned(<span class="hljs-number">4</span>))) tmp[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-built_in">memcpy</span>(tmp, (<span class="hljs-type">uint8_t</span> *)data, <span class="hljs-number">4</span>);<br>  <span class="hljs-type">uint32_t</span> lw = *((<span class="hljs-type">uint32_t</span> *)(((<span class="hljs-type">uint8_t</span> *)(tmp)) + pos));<br>  <span class="hljs-type">float_union_t</span> fu = &#123;.u32 = lw&#125;;<br>  <span class="hljs-keyword">return</span> fu.f;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">utils_set_float_at</span><span class="hljs-params">(<span class="hljs-type">void</span> *data, <span class="hljs-type">int</span> pos, <span class="hljs-type">float</span> value)</span> &#123;<br>  *((<span class="hljs-type">uint32_t</span> *)((<span class="hljs-type">uint8_t</span> *)(data) + pos)) = *(<span class="hljs-type">uint32_t</span> *)(&amp;value);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span> &#123;<br>  <span class="hljs-type">uint8_t</span> rsp[] = &#123;<span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x40</span>&#125;;<br>  <span class="hljs-type">float</span> value = utils_get_float_at(rsp, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;value = %f\n&quot;</span>, value);<br><br>  <span class="hljs-type">uint8_t</span> float_to_hex_buf[<span class="hljs-number">4</span>];<br>  <span class="hljs-type">float</span> float_num = <span class="hljs-number">12.000000</span>;<br>  bzero(float_to_hex_buf, <span class="hljs-keyword">sizeof</span>(float_to_hex_buf));<br>  utils_set_float_at(float_to_hex_buf, <span class="hljs-number">0</span>, float_num);<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;float %f to hex = &quot;</span>, float_num);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.02hx &quot;</span>, float_to_hex_buf[i]);<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>  <span class="hljs-type">uint16_t</span> dest[<span class="hljs-number">4</span>];<br>  bzero(dest, <span class="hljs-keyword">sizeof</span>(dest));<br>  <span class="hljs-type">int</span> rc = <span class="hljs-number">2</span>;<br>  <span class="hljs-type">int</span> offset = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; rc; i++) &#123;<br>    <span class="hljs-comment">/* shift reg hi_byte to temp OR with lo_byte */</span><br>    dest[i] = (rsp[(i &lt;&lt; <span class="hljs-number">1</span>)] &lt;&lt; <span class="hljs-number">8</span>) | rsp[offset + (i &lt;&lt; <span class="hljs-number">1</span>)];<br>  &#125;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.04hx &quot;</span>, dest[i]);<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>  value = utils_get_float_at(dest, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;value = %f\n&quot;</span>, value);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">pureos@pureos:~$ gcc 1.c -o 1<br>pureos@pureos:~$ ./1<br>value = 3.015625<br>float 12.000000 to hex = 00 00 40 41 <br>0000 4140 <br>value = 12.000000<br></code></pre></td></tr></table></figure><p>可以看到，我们已经正确解析出了电压值。</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-type">uint8_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> <span class="hljs-type">uint16_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-type">uint32_t</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>  <span class="hljs-type">uint32_t</span> u32;<br>  <span class="hljs-type">float</span> f;<br>&#125; <span class="hljs-type">float_union_t</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">float</span> <span class="hljs-title function_">utils_get_float_at</span><span class="hljs-params">(<span class="hljs-type">void</span> *data, <span class="hljs-type">int</span> pos)</span> &#123;<br>  <span class="hljs-type">uint8_t</span> __attribute__((aligned(<span class="hljs-number">4</span>))) tmp[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-built_in">memcpy</span>(tmp, (<span class="hljs-type">uint8_t</span> *)data, <span class="hljs-number">4</span>);<br>  <span class="hljs-type">uint32_t</span> lw = *((<span class="hljs-type">uint32_t</span> *)(((<span class="hljs-type">uint8_t</span> *)(tmp)) + pos));<br>  <span class="hljs-type">float_union_t</span> fu = &#123;.u32 = lw&#125;;<br>  <span class="hljs-keyword">return</span> fu.f;<br>&#125;<br><br><span class="hljs-comment">// true is little endian, flase is big endian</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">check_cpu</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">w</span> &#123;</span><br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-type">char</span> b;<br>  &#125; c;<br>  c.a = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> (c.b == <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> data[], <span class="hljs-type">int</span> num)</span> &#123;<br>  <span class="hljs-type">int</span> i, j;<br>  <span class="hljs-type">uint16_t</span> temp;<br><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>, j = num - <span class="hljs-number">1</span>; i &lt; j; i++, j--) &#123;<br>    temp = data[i];<br>    data[i] = data[j];<br>    data[j] = temp;<br>  &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span> &#123;<br>  <span class="hljs-type">int</span> rc = <span class="hljs-number">2</span>;<br>  <span class="hljs-type">int</span> offset = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">uint8_t</span> rsp[] = &#123;<span class="hljs-number">0x01</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x93</span>&#125;;<br>  <span class="hljs-type">uint16_t</span> dest[<span class="hljs-number">2</span>];<br><br>  bzero(dest, <span class="hljs-keyword">sizeof</span>(dest));<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; rc; i++) &#123;<br>    <span class="hljs-comment">/* shift reg hi_byte to temp OR with lo_byte */</span><br>    dest[i] = (rsp[offset + <span class="hljs-number">2</span> + (i &lt;&lt; <span class="hljs-number">1</span>)] &lt;&lt; <span class="hljs-number">8</span>) | rsp[offset + <span class="hljs-number">3</span> + (i &lt;&lt; <span class="hljs-number">1</span>)];<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (!check_cpu()) &#123;<br>    reverse(dest, <span class="hljs-number">2</span>);<br>  &#125;<br><br>  <span class="hljs-type">float</span> value = utils_get_float_at(dest, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;value = %f\n&quot;</span>, value);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>最后还加入了一个对 cpu 的大小端序判断，这样可用性和可移植性会更强。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ModBus-报文解析实战&quot;&gt;&lt;a href=&quot;#ModBus-报文解析实战&quot; class=&quot;headerlink&quot; title=&quot;ModBus 报文解析实战&quot;&gt;&lt;/a&gt;ModBus 报文解析实战&lt;/h1&gt;&lt;p&gt;事情是这样的，项目需要一个串口采集1032协议电压的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>003-入手VPS后要做的几件事</title>
    <link href="https://kydins.com/003-ru-shou-vps-hou-yao-zuo-de-ji-jian-shi.html"/>
    <id>https://kydins.com/003-ru-shou-vps-hou-yao-zuo-de-ji-jian-shi.html</id>
    <published>2023-10-03T16:52:38.000Z</published>
    <updated>2023-10-14T09:01:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="入手-VPS-后要做的几件事"><a href="#入手-VPS-后要做的几件事" class="headerlink" title="入手 VPS 后要做的几件事"></a>入手 VPS 后要做的几件事</h1><p>前几天新购买了一台小鸡，在首次使用时进行了一些配置上的修改，在这里与大家分享。按照本文章的操作，可以大大降低成为肉鸡的概率。</p><p>本文系统：Ubuntu 18.04</p><p><strong>注：本文代码块前的 $ 代表在终端中的输入指令，复制时请勿输入！</strong></p><h2 id="修改-root-密码"><a href="#修改-root-密码" class="headerlink" title="修改 root 密码"></a>修改 root 密码</h2><p>如果你的VPS提供商的机子没有 root 密码，一定一定要马上修改一个密码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">passwd</span><br>Enter new UNIX password: <br>Retype new UNIX password: <br>passwd: password updated successfully<br></code></pre></td></tr></table></figure><h2 id="创建管理员账号"><a href="#创建管理员账号" class="headerlink" title="创建管理员账号"></a>创建管理员账号</h2><p>这里的管理员是指，能够运行 sudo 命令的用户，为了安全，在正常使用中禁止使用 root 账号操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">adduser &lt;username&gt;</span><br>Enter new UNIX password: <br>Retype new UNIX password: <br><br>这里输入密码后可能还会提示需要输入用户的信息，回车默认即可<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">usermod -aG sudo &lt;username&gt; <span class="hljs-comment"># 为用户添加 sudo 权限</span></span><br></code></pre></td></tr></table></figure><h2 id="删除默认用户和组"><a href="#删除默认用户和组" class="headerlink" title="删除默认用户和组"></a>删除默认用户和组</h2><p>可以使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cat</span> /etc/passwd</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cat</span> /etc/group</span><br></code></pre></td></tr></table></figure><p>来分别查看用户列表和组列表</p><p>删除多余的用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">userdel <span class="hljs-built_in">sync</span> &amp;&amp; userdel shutdown &amp;&amp; userdel halt &amp;&amp; userdel uucp &amp;&amp; userdel operator &amp;&amp; userdel games &amp;&amp; userdel gopher</span><br></code></pre></td></tr></table></figure><p>删除多余组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">groupdel adm &amp;&amp; groupdel games &amp;&amp; groupdel lp &amp;&amp; groupdel dip</span><br></code></pre></td></tr></table></figure><p>删除了不必要的用户和组后，我们将用户管理的权限关闭</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">chattr +i /etc/passwd</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">chattr +i /etc/shadow</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">chattr +i /etc/group</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">chattr +i /etc/gshadow</span><br></code></pre></td></tr></table></figure><p>i属性代表这个文件不允许被修改，删除。这样我们就无法给系统新建用户。需要新建用户的时候使用 -i 还原</p><h2 id="修改-SSH-配置"><a href="#修改-SSH-配置" class="headerlink" title="修改 SSH 配置"></a>修改 SSH 配置</h2><h3 id="添加-ssh-私钥"><a href="#添加-ssh-私钥" class="headerlink" title="添加 ssh 私钥"></a>添加 ssh 私钥</h3><p>在你的 windows 终端下生成一对私钥对，个人喜好使用 GitHub 推荐的 Ed25519 算法</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>ssh-keygen -t ed25519<br></code></pre></td></tr></table></figure><p>可以自己指定文件保存的路径，一般来说默认即可。之后询问是否输入密码，这里建议还是输入一个密码。</p><p>现在我们需要的私钥上传到服务器中，我直接上传到 home 目录下了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建 .ssh 文件夹</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> ~/.ssh</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> 700 ~/.ssh</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mv</span> id_ed25519 ~/.ssh/authorized_keys</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> 400 ~/.ssh/authorized_keys</span><br></code></pre></td></tr></table></figure><h3 id="禁用-root-登录及密码登录"><a href="#禁用-root-登录及密码登录" class="headerlink" title="禁用 root 登录及密码登录"></a>禁用 root 登录及密码登录</h3><p>在上传了 ssh 公钥后，我们需要关闭 root 账号的登录权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo vi /etc/ssh/sshd_config</span><br></code></pre></td></tr></table></figure><p>将<code>PermitRootLogin yes</code> 改为 <code>PermitRootLogin no</code> 关闭 root 登录<br>将<code>PasswordAuthentication yes</code> 改为 <code>PasswordAuthentication no</code> 关闭密码登录</p><p>在配置文件最后新增一行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ClientAliveInterval</span> <span class="hljs-number">60</span><br></code></pre></td></tr></table></figure><h3 id="修改-ssh-端口"><a href="#修改-ssh-端口" class="headerlink" title="修改 ssh 端口"></a>修改 ssh 端口</h3><p>同上一步，将 <code>Port 22</code> 改为任意没有被占用的端口，建议改成小众一点的</p><p>全部修改完成后，重启 ssh 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo service sshd restart</span><br></code></pre></td></tr></table></figure><p>可以重新连接一下，看是否修改成功</p><h2 id="安装-Fail2Ban"><a href="#安装-Fail2Ban" class="headerlink" title="安装 Fail2Ban"></a>安装 Fail2Ban</h2><p><a href="https://github.com/fail2ban/fail2ban">Fail2Ban</a> 是一款入侵防御软件， 将尝试爆破 ssh 密码的 ip 封停，可以保护服务器免受暴力攻击。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt install fail2ban</span><br></code></pre></td></tr></table></figure><h2 id="安装长亭雷池-WAF"><a href="#安装长亭雷池-WAF" class="headerlink" title="安装长亭雷池 WAF"></a>安装长亭雷池 WAF</h2><p><a href="https://github.com/chaitin/safeline">雷池</a> 是一款足够简单、足够好用、足够强的免费 WAF。基于业界领先的语义引擎检测技术，作为反向代理接入，保护你的网站不受黑客攻击。</p><p>核心检测能力由智能语义分析算法驱动，专为社区而生，不让黑客越雷池半步。</p><h3 id="配置需求"><a href="#配置需求" class="headerlink" title="配置需求"></a>配置需求</h3><ul><li>操作系统：Linux</li><li>指令架构：x86_64</li><li>软件依赖：Docker 20.10.6 版本以上</li><li>软件依赖：Docker Compose 2.0.0 版本以上</li><li>最小化环境：1 核 CPU &#x2F; 1 GB 内存 &#x2F; 10 GB 磁盘</li></ul><h3 id="一键安装"><a href="#一键安装" class="headerlink" title="一键安装"></a>一键安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSLk https://waf-ce.chaitin.cn/release/latest/setup.sh)</span>&quot;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>更多安装方式请参考 <a href="https://waf-ce.chaitin.cn/posts/guide_install">安装雷池</a></p></blockquote><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>浏览器打开后台管理页面 <code>https://&lt;waf-ip&gt;:9443</code>。根据界面提示，使用 <strong>支持 TOTP 的认证软件</strong> 扫描二维码，然后输入动态口令登录。</p><h2 id="禁止系统响应任何从外部-内部来的-ping-请求"><a href="#禁止系统响应任何从外部-内部来的-ping-请求" class="headerlink" title="禁止系统响应任何从外部&#x2F;内部来的 ping 请求"></a>禁止系统响应任何从外部&#x2F;内部来的 ping 请求</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</span><br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://zhuanlan.zhihu.com/p/371611071">https://zhuanlan.zhihu.com/p/371611071</a></p><p><a href="https://www.logcg.com/archives/884.htmlrchives/884.html">https://www.logcg.com/archives/884.htmlrchives/884.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;入手-VPS-后要做的几件事&quot;&gt;&lt;a href=&quot;#入手-VPS-后要做的几件事&quot; class=&quot;headerlink&quot; title=&quot;入手 VPS 后要做的几件事&quot;&gt;&lt;/a&gt;入手 VPS 后要做的几件事&lt;/h1&gt;&lt;p&gt;前几天新购买了一台小鸡，在首次使用时进行了一</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>002-OpenWrt中GRE掉线问题</title>
    <link href="https://kydins.com/002-openwrt-zhong-gre-diao-xian-wen-ti.html"/>
    <id>https://kydins.com/002-openwrt-zhong-gre-diao-xian-wen-ti.html</id>
    <published>2023-09-26T15:54:54.000Z</published>
    <updated>2023-10-20T12:30:00.595Z</updated>
    
    <content type="html"><![CDATA[<p>前几天使用OpenWrt测试GRE功能时发现，在4G网络和有线网之间切换会导致掉线，遂简单排查了一下问题所在。</p><h3 id="情景复现"><a href="#情景复现" class="headerlink" title="情景复现"></a>情景复现</h3><p><strong>本机</strong></p><p>系统：OpenWrt</p><p>有线网卡（wan）：eth1，IP：192.168.0.194，子网掩码：255.255.255.0，网关：192.168.0.1</p><p>有线网卡（lan）：br-lan，IP：192.168.3.1，子网掩码：255.255.255.0</p><p>无线网卡（wwan）：usb0，IP：10.221.139.224，子网掩码：255.255.255.0，网关：10.221.139.1</p><p>无线网卡使用中国移动4G卡上网</p><p><strong>GRE对端</strong></p><p>系统：OpenWrt</p><p>有线网卡（wan）：eth1，IP：192.168.0.242，子网掩码：255.255.255.0，网关：192.168.0.1</p><p>有线网卡（lan）：br-lan，IP：192.168.2.218，子网掩码：255.255.255.0</p><p><img src="http://image.kydins.com/002-network_topology_diagram.png" alt="网络拓扑图"></p><p>本机GRE配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /etc/config/network<br><br>config interface &#x27;gresbksg&#x27;<br>        option disabled &#x27;0&#x27;<br>        option peeraddr &#x27;192.168.0.242&#x27; // 对端IP<br>        option proto &#x27;gre&#x27;<br>        option mtu &#x27;1280&#x27;<br>        option peerlocalip &#x27;192.168.2.0&#x27; // 对端<br>        option peerlocalmask &#x27;255.255.255.0&#x27;<br>        option zone &#x27;wan&#x27;<br><br>config interface &#x27;gresbksg_grestatic&#x27;<br>        option ifname &#x27;@gresbksg&#x27;<br>        option disabled &#x27;0&#x27;<br>        option ipaddr &#x27;192.168.5.1&#x27; // GRE隧道IP，对端为192.168.5.2<br>        option netmask &#x27;255.255.255.0&#x27;<br>        option proto &#x27;static&#x27;<br>        option zone &#x27;wan&#x27;<br></code></pre></td></tr></table></figure><p>GRE正常建立，流量走eth1，此时的路由表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@pg-2049671F7524:~# route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         192.168.0.1     0.0.0.0         UG    10     0        0 eth1<br>0.0.0.0         10.221.139.1    0.0.0.0         UG    12     0        0 usb0<br>10.221.139.0    0.0.0.0         255.255.255.0   U     12     0        0 usb0<br>192.168.0.0     0.0.0.0         255.255.255.0   U     10     0        0 eth1<br>192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br>192.168.3.0     0.0.0.0         255.255.255.0   U     0      0        0 br-lan<br>192.168.5.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br></code></pre></td></tr></table></figure><p>此时本机可以直接ping通对端的lan口，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@pg-2049671F7524:~# ping 192.168.2.218<br>PING 192.168.2.218 (192.168.2.218): 56 data bytes<br>64 bytes from 192.168.2.218: seq=0 ttl=64 time=1.481 ms<br>64 bytes from 192.168.2.218: seq=1 ttl=64 time=4.312 ms<br>64 bytes from 192.168.2.218: seq=2 ttl=64 time=2.344 ms<br>64 bytes from 192.168.2.218: seq=3 ttl=64 time=1.579 ms<br>64 bytes from 192.168.2.218: seq=4 ttl=64 time=3.409 ms<br>--- 192.168.2.218 ping statistics ---<br>5 packets transmitted, 5 packets received, 0% packet loss<br>round-trip min/avg/max = 1.481/2.625/4.312 ms<br></code></pre></td></tr></table></figure><p>路由追踪：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@pg-2049671F7524:~# traceroute 192.168.2.218<br>traceroute to 192.168.2.218 (192.168.2.218), 30 hops max, 38 byte packets<br> 1  192.168.2.218 (192.168.2.218)  1.173 ms  2.722 ms  2.603 ms<br><br></code></pre></td></tr></table></figure><p>拔掉wan口网线后，此时正常情况下应该无法ping通，因为GRE在内网中，路由表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@pg-2049671F7524:~# route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         10.77.102.1     0.0.0.0         UG    12     0        0 usb0<br>10.77.102.0     0.0.0.0         255.255.255.0   U     12     0        0 usb0<br>192.168.0.242   10.77.102.1     255.255.255.255 UGH   12     0        0 usb0<br>192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br>192.168.3.0     0.0.0.0         255.255.255.0   U     0      0        0 br-lan<br>192.168.5.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br></code></pre></td></tr></table></figure><p>将网线接回去后，还是无法ping通，此时的路由表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@pg-2049671F7524:~# route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         192.168.0.1     0.0.0.0         UG    10     0        0 eth1<br>0.0.0.0         10.77.102.1     0.0.0.0         UG    12     0        0 usb0<br>10.77.102.0     0.0.0.0         255.255.255.0   U     12     0        0 usb0<br>192.168.0.0     0.0.0.0         255.255.255.0   U     10     0        0 eth1<br>192.168.0.242   10.77.102.1     255.255.255.255 UGH   12     0        0 usb0<br>192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br>192.168.3.0     0.0.0.0         255.255.255.0   U     0      0        0 br-lan<br>192.168.5.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br></code></pre></td></tr></table></figure><p>可以发现，我们在拔掉网线后，路由表内自动添加了一条host路由</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">192.168.0.242   10.77.102.1     255.255.255.255 UGH   12     0        0 usb0<br></code></pre></td></tr></table></figure><p>但是由于我们的GRE对端是建立在内网中的，4G网络肯定是无法访问的，所有这条host路由是错误的。</p><p>当我们将网线接回后，由于已经存在了一条host路由，所有访问192.168.0.242的流量会从usb0出去，导致GRE隧道无法建立。</p><h3 id="怎么使系统正确添加host路由？"><a href="#怎么使系统正确添加host路由？" class="headerlink" title="怎么使系统正确添加host路由？"></a>怎么使系统正确添加host路由？</h3><h4 id="思路一：关闭自动添加host路由"><a href="#思路一：关闭自动添加host路由" class="headerlink" title="思路一：关闭自动添加host路由"></a>思路一：关闭自动添加host路由</h4><p>查看OpenWrt源码中的gre脚本（openwrt&#x2F;package&#x2F;network&#x2F;config&#x2F;gre&#x2F;files&#x2F;gre.sh）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-function"><span class="hljs-title">gre_setup</span></span>() &#123;<br><span class="hljs-built_in">local</span> cfg=<span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span><br><span class="hljs-built_in">local</span> mode=<span class="hljs-string">&quot;<span class="hljs-variable">$2</span>&quot;</span><br><span class="hljs-built_in">local</span> remoteip<br><br><span class="hljs-built_in">local</span> ipaddr peeraddr peerlocalip peerlocalmask<br>json_get_vars <span class="hljs-built_in">df</span> ipaddr peeraddr tunlink nohostroute peerlocalip peerlocalmask<br><br>[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$peeraddr</span>&quot;</span> ] &amp;&amp; &#123;<br>proto_notify_error <span class="hljs-string">&quot;<span class="hljs-variable">$cfg</span>&quot;</span> <span class="hljs-string">&quot;MISSING_PEER_ADDRESS&quot;</span><br>proto_block_restart <span class="hljs-string">&quot;<span class="hljs-variable">$cfg</span>&quot;</span><br><span class="hljs-built_in">exit</span><br>&#125;<br><br>remoteip=$(resolveip -t 10 -4 <span class="hljs-string">&quot;<span class="hljs-variable">$peeraddr</span>&quot;</span>)<br><br><span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$remoteip</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>proto_notify_error <span class="hljs-string">&quot;<span class="hljs-variable">$cfg</span>&quot;</span> <span class="hljs-string">&quot;PEER_RESOLVE_FAIL&quot;</span><br><span class="hljs-built_in">exit</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">for</span> ip <span class="hljs-keyword">in</span> <span class="hljs-variable">$remoteip</span>; <span class="hljs-keyword">do</span><br>peeraddr=<span class="hljs-variable">$ip</span><br><span class="hljs-built_in">break</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;nohostroute&#125;</span>&quot;</span> != <span class="hljs-string">&quot;1&quot;</span> ]; <span class="hljs-keyword">then</span><br>( proto_add_host_dependency <span class="hljs-string">&quot;<span class="hljs-variable">$cfg</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$peeraddr</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$tunlink</span>&quot;</span> )<br><span class="hljs-keyword">fi</span><br><br>[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$ipaddr</span>&quot;</span> ] &amp;&amp; &#123;<br><span class="hljs-built_in">local</span> wanif=<span class="hljs-string">&quot;<span class="hljs-variable">$tunlink</span>&quot;</span><br><span class="hljs-keyword">if</span> [ -z <span class="hljs-variable">$wanif</span> ] &amp;&amp; ! network_find_wan wanif; <span class="hljs-keyword">then</span><br>proto_notify_error <span class="hljs-string">&quot;<span class="hljs-variable">$cfg</span>&quot;</span> <span class="hljs-string">&quot;NO_WAN_LINK&quot;</span><br><span class="hljs-built_in">exit</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> ! network_get_ipaddr ipaddr <span class="hljs-string">&quot;<span class="hljs-variable">$wanif</span>&quot;</span>; <span class="hljs-keyword">then</span><br>proto_notify_error <span class="hljs-string">&quot;<span class="hljs-variable">$cfg</span>&quot;</span> <span class="hljs-string">&quot;NO_WAN_LINK&quot;</span><br><span class="hljs-built_in">exit</span><br><span class="hljs-keyword">fi</span><br>&#125;<br><br>[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$df</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">df</span>=<span class="hljs-string">&quot;1&quot;</span><br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$mode</span>&quot;</span> <span class="hljs-keyword">in</span><br>gretapip)<br>gre_generic_setup <span class="hljs-variable">$cfg</span> <span class="hljs-variable">$mode</span> <span class="hljs-variable">$ipaddr</span> <span class="hljs-variable">$peeraddr</span> <span class="hljs-string">&quot;gre4t-<span class="hljs-variable">$cfg</span>&quot;</span><br>route add -net <span class="hljs-string">&quot;<span class="hljs-variable">$peerlocalip</span>&quot;</span> netmask <span class="hljs-string">&quot;<span class="hljs-variable">$peerlocalmask</span>&quot;</span> dev <span class="hljs-string">&quot;gre4t-<span class="hljs-variable">$cfg</span>&quot;</span><br>;;<br>*)<br>gre_generic_setup <span class="hljs-variable">$cfg</span> <span class="hljs-variable">$mode</span> <span class="hljs-variable">$ipaddr</span> <span class="hljs-variable">$peeraddr</span> <span class="hljs-string">&quot;gre4-<span class="hljs-variable">$cfg</span>&quot;</span><br>route add -net <span class="hljs-string">&quot;<span class="hljs-variable">$peerlocalip</span>&quot;</span> netmask <span class="hljs-string">&quot;<span class="hljs-variable">$peerlocalmask</span>&quot;</span> dev <span class="hljs-string">&quot;gre4-<span class="hljs-variable">$cfg</span>&quot;</span><br>;;<br><span class="hljs-keyword">esac</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，只有在nohostroute为非1时，才会添加host路由</p><blockquote><p>以下是ChatGPT的回答：</p></blockquote><p><code>proto_add_host_dependency</code>是OpenWrt中的一个函数，它用于向当前接口的依赖列表中添加一个host依赖项。</p><p>在OpenWrt中，每个接口都有一个依赖列表，用于记录这个接口所依赖的其他接口或主机。当这个接口启动时，系统会检查它的依赖列表，如果依赖项中有任何一个接口或主机不可达，这个接口就无法启动。这种机制可以保证网络的连通性和稳定性。</p><p><code>proto_add_host_dependency</code>函数用于向当前接口的依赖列表中添加一个host依赖项。它接受三个参数：当前接口的配置名称、依赖主机的IP地址、依赖主机所在的网络接口名称。例如，以下命令将当前接口<code>eth0</code>添加一个host依赖项，依赖主机的IP地址是<code>192.168.1.1</code>，所在的网络接口名称是<code>eth1</code>：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proto_add_host_dependency</span> <span class="hljs-string">&quot;eth0&quot;</span> <span class="hljs-string">&quot;192.168.1.1&quot;</span> <span class="hljs-string">&quot;eth1&quot;</span><br></code></pre></td></tr></table></figure><p>在GRE隧道的配置中，<code>proto_add_host_dependency</code>函数通常用于将对端IP地址添加到当前隧道的依赖列表中。这样，当对端不可达时，当前隧道就无法启动，从而避免了无效的隧道连接。</p><p>在你的问题中，<code>proto_add_host_dependency</code>函数用于向当前GRE隧道的依赖列表中添加对端IP地址的host依赖项。如果<code>nohostroute</code>字段没有设置为<code>1</code>，系统会自动添加这个host路由，使得对端IP地址可达。如果<code>nohostroute</code>字段设置为<code>1</code>，则需要手动使用<code>proto_add_host_dependency</code>函数将对端IP地址添加到依赖列表中，否则GRE隧道无法启动。</p><p>OpenWrt官方是这样<a href="https://openwrt.org/docs/guide-user/network/tunneling_interface_protocols">解释</a>这个参数的：</p><table><thead><tr><th>Name</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>nohostroute</td><td>boolean</td><td>no</td><td>0</td><td>Do not add routes to ensure the tunnel endpoints are routed via non-tunnel device</td></tr></tbody></table><p>于是我尝试了更改GRE的配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">config interface &#x27;gresbksg&#x27;<br>        option disabled &#x27;0&#x27;<br>        option peeraddr &#x27;192.168.0.242&#x27;<br>        option proto &#x27;gre&#x27;<br>        option mtu &#x27;1280&#x27;<br>        option peerlocalip &#x27;192.168.2.0&#x27;<br>        option peerlocalmask &#x27;255.255.255.0&#x27;<br>        option zone &#x27;wan&#x27;<br>        option nohostroute &#x27;1&#x27;<br><br>config interface &#x27;gresbksg_grestatic&#x27;<br>        option ifname &#x27;@gresbksg&#x27;<br>        option disabled &#x27;0&#x27;<br>        option ipaddr &#x27;192.168.5.1&#x27;<br>        option netmask &#x27;255.255.255.0&#x27;<br>        option proto &#x27;static&#x27;<br>        option zone &#x27;wan&#x27;<br></code></pre></td></tr></table></figure><p>修改完成后重启network，发现是可以正常使用的。此时的路由表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@pg-2049671F7524:~# route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         192.168.0.1     0.0.0.0         UG    10     0        0 eth1<br>0.0.0.0         10.162.134.1    0.0.0.0         UG    12     0        0 usb0<br>10.162.134.0    0.0.0.0         255.255.255.0   U     12     0        0 usb0<br>192.168.0.0     0.0.0.0         255.255.255.0   U     10     0        0 eth1<br>192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br>192.168.3.0     0.0.0.0         255.255.255.0   U     0      0        0 br-lan<br>192.168.5.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br></code></pre></td></tr></table></figure><p>将网线拔掉后，路由表已经不会自动添加host路由了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@pg-2049671F7524:~# route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         10.162.134.1    0.0.0.0         UG    12     0        0 usb0<br>10.162.134.0    0.0.0.0         255.255.255.0   U     12     0        0 usb0<br>192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br>192.168.3.0     0.0.0.0         255.255.255.0   U     0      0        0 br-lan<br>192.168.5.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br></code></pre></td></tr></table></figure><p>然后再接回网线，查看路由表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@pg-2049671F7524:~# route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         192.168.0.1     0.0.0.0         UG    10     0        0 eth1<br>0.0.0.0         10.162.134.1    0.0.0.0         UG    12     0        0 usb0<br>10.162.134.0    0.0.0.0         255.255.255.0   U     12     0        0 usb0<br>192.168.0.0     0.0.0.0         255.255.255.0   U     10     0        0 eth1<br>192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br>192.168.3.0     0.0.0.0         255.255.255.0   U     0      0        0 br-lan<br>192.168.5.0     0.0.0.0         255.255.255.0   U     0      0        0 gre4-gresbksg<br></code></pre></td></tr></table></figure><p>可以发现因为没有错误的host路由，我们的GRE隧道又能正常建立连接了。尝试ping一下对端的LAN口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@pg-2049671F7524:~# ping 192.168.2.218<br>PING 192.168.2.218 (192.168.2.218): 56 data bytes<br>64 bytes from 192.168.2.218: seq=0 ttl=64 time=1.810 ms<br>64 bytes from 192.168.2.218: seq=1 ttl=64 time=3.701 ms<br>64 bytes from 192.168.2.218: seq=2 ttl=64 time=6.526 ms<br>64 bytes from 192.168.2.218: seq=3 ttl=64 time=4.254 ms<br>--- 192.168.2.218 ping statistics ---<br>4 packets transmitted, 4 packets received, 0% packet loss<br>round-trip min/avg/max = 1.810/4.072/6.526 ms<br></code></pre></td></tr></table></figure><p><strong>疑惑：为什么用有线时，不会添加host路由？</strong></p><h4 id="思路二：将GRE隧道绑定到某个接口上-未成功"><a href="#思路二：将GRE隧道绑定到某个接口上-未成功" class="headerlink" title="思路二：将GRE隧道绑定到某个接口上(未成功)"></a>思路二：将GRE隧道绑定到某个接口上(未成功)</h4><p><del>可以使用参数<code>tunlink</code></del></p><table><thead><tr><th>Name</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>tunlink</td><td>string</td><td>no</td><td>(none)</td><td>Bind the tunnel to the specified interface, OpenWrt 21.02+</td></tr></tbody></table><p><del>修改network中gre的配置，将GRE隧道绑定到本地网络接口eth1上：</del><br>口eth1上：~~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前几天使用OpenWrt测试GRE功能时发现，在4G网络和有线网之间切换会导致掉线，遂简单排查了一下问题所在。&lt;/p&gt;
&lt;h3 id=&quot;情景复现&quot;&gt;&lt;a href=&quot;#情景复现&quot; class=&quot;headerlink&quot; title=&quot;情景复现&quot;&gt;&lt;/a&gt;情景复现&lt;/h3&gt;&lt;p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>001-C语言中将char=1会发生什么？</title>
    <link href="https://kydins.com/001-c-yu-yan-zhong-jiang-char-1-hui-fa-sheng-shi-me.html"/>
    <id>https://kydins.com/001-c-yu-yan-zhong-jiang-char-1-hui-fa-sheng-shi-me.html</id>
    <published>2023-09-10T15:54:54.000Z</published>
    <updated>2023-10-20T12:17:09.703Z</updated>
    
    <content type="html"><![CDATA[<hr>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
